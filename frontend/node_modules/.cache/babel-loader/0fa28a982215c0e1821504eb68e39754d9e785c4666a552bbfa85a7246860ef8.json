{"ast":null,"code":"var _jsxFileName = \"C:\\\\laragon\\\\www\\\\Tunegie\\\\frontend\\\\src\\\\contexts\\\\GameContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameContext = /*#__PURE__*/createContext();\nexport const useGame = () => {\n  _s();\n  const context = useContext(GameContext);\n  if (!context) {\n    throw new Error('useGame must be used within a GameProvider');\n  }\n  return context;\n};\n_s(useGame, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const GameProvider = ({\n  children\n}) => {\n  _s2();\n  const {\n    isAuthenticated,\n    API_BASE\n  } = useAuth();\n  const [currentGame, setCurrentGame] = useState(null);\n  const [gameHistory, setGameHistory] = useState([]);\n\n  // Keep a ref to the current game for immediate access\n  const currentGameRef = {\n    current: null\n  };\n\n  // Start a new game session\n  const startGame = (gameMode = 'standard') => {\n    const newGame = {\n      id: Date.now(),\n      gameMode,\n      startTime: new Date(),\n      rounds: [],\n      currentRound: 0,\n      score: 0,\n      correctAnswers: 0,\n      status: 'active'\n    };\n    currentGameRef.current = newGame;\n    setCurrentGame(newGame);\n    console.log('Started game and set ref:', newGame.id);\n    return newGame;\n  };\n\n  // Add a round result to the current game\n  const addRound = roundData => {\n    var _roundData$track, _roundData$track2, _roundData$track3, _roundData$track3$art, _roundData$track3$art2, _roundData$track4, _roundData$track4$alb;\n    const gameToUpdate = currentGameRef.current || currentGame;\n    console.log('addRound called with game:', gameToUpdate ? {\n      id: gameToUpdate.id,\n      rounds: gameToUpdate.rounds.length,\n      score: gameToUpdate.score\n    } : null);\n    if (!gameToUpdate) {\n      console.error('No active game session');\n      return null;\n    }\n    const round = {\n      roundNumber: gameToUpdate.rounds.length + 1,\n      track_id: ((_roundData$track = roundData.track) === null || _roundData$track === void 0 ? void 0 : _roundData$track.id) || '',\n      track_title: ((_roundData$track2 = roundData.track) === null || _roundData$track2 === void 0 ? void 0 : _roundData$track2.title) || '',\n      track_artist: ((_roundData$track3 = roundData.track) === null || _roundData$track3 === void 0 ? void 0 : (_roundData$track3$art = _roundData$track3.artists) === null || _roundData$track3$art === void 0 ? void 0 : (_roundData$track3$art2 = _roundData$track3$art[0]) === null || _roundData$track3$art2 === void 0 ? void 0 : _roundData$track3$art2.name) || '',\n      album_title: ((_roundData$track4 = roundData.track) === null || _roundData$track4 === void 0 ? void 0 : (_roundData$track4$alb = _roundData$track4.album) === null || _roundData$track4$alb === void 0 ? void 0 : _roundData$track4$alb.title) || '',\n      user_guess: roundData.userGuess || '',\n      correct_answer: roundData.correctAnswer || '',\n      is_correct: roundData.isCorrect || false,\n      time_taken: roundData.timeTaken || 0,\n      points_earned: roundData.pointsEarned || 0,\n      timestamp: new Date()\n    };\n    const updatedGame = {\n      ...gameToUpdate,\n      rounds: [...gameToUpdate.rounds, round],\n      currentRound: gameToUpdate.currentRound + 1,\n      score: gameToUpdate.score + (round.points_earned || 0),\n      correctAnswers: gameToUpdate.correctAnswers + (round.is_correct ? 1 : 0)\n    };\n\n    // Update both ref and state\n    currentGameRef.current = updatedGame;\n    setCurrentGame(updatedGame);\n    console.log('Updated game state:', {\n      id: updatedGame.id,\n      rounds: updatedGame.rounds.length,\n      score: updatedGame.score,\n      correctAnswers: updatedGame.correctAnswers\n    });\n    return updatedGame;\n  };\n\n  // End the current game and save score\n  const endGame = async () => {\n    const gameToEnd = currentGameRef.current || currentGame;\n    if (!gameToEnd) {\n      console.error('No active game session to end');\n      return null;\n    }\n    console.log('Ending game with current state:', {\n      id: gameToEnd.id,\n      rounds: gameToEnd.rounds.length,\n      score: gameToEnd.score,\n      correctAnswers: gameToEnd.correctAnswers\n    });\n    const finalGame = {\n      ...gameToEnd,\n      status: 'completed',\n      endTime: new Date(),\n      totalRounds: gameToEnd.rounds.length\n    };\n\n    // Save score if user is authenticated (before clearing currentGame)\n    let result = null;\n    if (isAuthenticated()) {\n      try {\n        result = await saveScore(finalGame);\n      } catch (error) {\n        console.error('Failed to save score:', error);\n        result = {\n          saveError: error.message\n        };\n      }\n    }\n\n    // Clear current game and update history after saving\n    currentGameRef.current = null;\n    setCurrentGame(null);\n    setGameHistory(prev => [finalGame, ...prev.slice(0, 9)]); // Keep last 10 games\n\n    return result ? {\n      ...finalGame,\n      serverResult: result\n    } : finalGame;\n  };\n\n  // Save score to server\n  const saveScore = async gameData => {\n    if (!isAuthenticated()) {\n      throw new Error('User not authenticated');\n    }\n    const token = localStorage.getItem('tunegie_token');\n    if (!token) {\n      throw new Error('No authentication token');\n    }\n    const payload = {\n      total_rounds: gameData.totalRounds || gameData.rounds.length,\n      correct_answers: gameData.correctAnswers,\n      score: gameData.score,\n      game_mode: gameData.gameMode,\n      rounds: gameData.rounds.map(round => ({\n        track_id: round.track_id,\n        track_title: round.track_title,\n        track_artist: round.track_artist,\n        album_title: round.album_title,\n        user_guess: round.user_guess,\n        is_correct: round.is_correct,\n        time_taken: round.time_taken,\n        points_earned: round.points_earned\n      }))\n    };\n    console.log('Sending score payload:', payload);\n    const response = await fetch(`${API_BASE}/backend/php/api/game/save_score.php`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify(payload)\n    });\n    const result = await response.json();\n    console.log('Save score response:', {\n      status: response.status,\n      result\n    });\n    if (!response.ok) {\n      console.error('Save score error:', result);\n      throw new Error(result.error || `Failed to save score (${response.status})`);\n    }\n    return result;\n  };\n\n  // Calculate points for a round\n  const calculatePoints = (isCorrect, timeTaken, difficulty = 1) => {\n    if (!isCorrect) return 0;\n\n    // Base points for correct answer\n    let points = 100 * difficulty;\n\n    // Time bonus (faster = more points)\n    if (timeTaken <= 3) points += 50; // Very fast\n    else if (timeTaken <= 5) points += 30; // Fast\n    else if (timeTaken <= 10) points += 10; // Normal\n\n    return Math.round(points);\n  };\n\n  // Get current game stats\n  const getCurrentStats = () => {\n    if (!currentGame) return null;\n    const totalRounds = currentGame.rounds.length;\n    const accuracy = totalRounds > 0 ? currentGame.correctAnswers / totalRounds * 100 : 0;\n    return {\n      rounds: totalRounds,\n      correct: currentGame.correctAnswers,\n      score: currentGame.score,\n      accuracy: Math.round(accuracy * 10) / 10 // Round to 1 decimal\n    };\n  };\n\n  // Abandon current game\n  const abandonGame = () => {\n    const gameToAbandon = currentGameRef.current || currentGame;\n    if (gameToAbandon) {\n      const abandonedGame = {\n        ...gameToAbandon,\n        status: 'abandoned',\n        endTime: new Date()\n      };\n      setGameHistory(prev => [abandonedGame, ...prev.slice(0, 9)]);\n    }\n    currentGameRef.current = null;\n    setCurrentGame(null);\n  };\n  const value = {\n    currentGame,\n    gameHistory,\n    startGame,\n    addRound,\n    endGame,\n    abandonGame,\n    calculatePoints,\n    getCurrentStats,\n    saveScore,\n    isGameActive: () => {\n      const game = currentGameRef.current || currentGame;\n      return game && game.status === 'active';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 246,\n    columnNumber: 5\n  }, this);\n};\n_s2(GameProvider, \"leWpluajJTmDQ9+ss3vyp30Iuhk=\", false, function () {\n  return [useAuth];\n});\n_c = GameProvider;\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useAuth","jsxDEV","_jsxDEV","GameContext","useGame","_s","context","Error","GameProvider","children","_s2","isAuthenticated","API_BASE","currentGame","setCurrentGame","gameHistory","setGameHistory","currentGameRef","current","startGame","gameMode","newGame","id","Date","now","startTime","rounds","currentRound","score","correctAnswers","status","console","log","addRound","roundData","_roundData$track","_roundData$track2","_roundData$track3","_roundData$track3$art","_roundData$track3$art2","_roundData$track4","_roundData$track4$alb","gameToUpdate","length","error","round","roundNumber","track_id","track","track_title","title","track_artist","artists","name","album_title","album","user_guess","userGuess","correct_answer","correctAnswer","is_correct","isCorrect","time_taken","timeTaken","points_earned","pointsEarned","timestamp","updatedGame","endGame","gameToEnd","finalGame","endTime","totalRounds","result","saveScore","saveError","message","prev","slice","serverResult","gameData","token","localStorage","getItem","payload","total_rounds","correct_answers","game_mode","map","response","fetch","method","headers","body","JSON","stringify","json","ok","calculatePoints","difficulty","points","Math","getCurrentStats","accuracy","correct","abandonGame","gameToAbandon","abandonedGame","value","isGameActive","game","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/laragon/www/Tunegie/frontend/src/contexts/GameContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\nimport { useAuth } from './AuthContext';\r\n\r\nconst GameContext = createContext();\r\n\r\nexport const useGame = () => {\r\n  const context = useContext(GameContext);\r\n  if (!context) {\r\n    throw new Error('useGame must be used within a GameProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const GameProvider = ({ children }) => {\r\n  const { isAuthenticated, API_BASE } = useAuth();\r\n  const [currentGame, setCurrentGame] = useState(null);\r\n  const [gameHistory, setGameHistory] = useState([]);\r\n  \r\n  // Keep a ref to the current game for immediate access\r\n  const currentGameRef = { current: null };\r\n\r\n  // Start a new game session\r\n  const startGame = (gameMode = 'standard') => {\r\n    const newGame = {\r\n      id: Date.now(),\r\n      gameMode,\r\n      startTime: new Date(),\r\n      rounds: [],\r\n      currentRound: 0,\r\n      score: 0,\r\n      correctAnswers: 0,\r\n      status: 'active'\r\n    };\r\n    currentGameRef.current = newGame;\r\n    setCurrentGame(newGame);\r\n    console.log('Started game and set ref:', newGame.id);\r\n    return newGame;\r\n  };\r\n\r\n  // Add a round result to the current game\r\n  const addRound = (roundData) => {\r\n    const gameToUpdate = currentGameRef.current || currentGame;\r\n    \r\n    console.log('addRound called with game:', gameToUpdate ? {\r\n      id: gameToUpdate.id,\r\n      rounds: gameToUpdate.rounds.length,\r\n      score: gameToUpdate.score\r\n    } : null);\r\n    \r\n    if (!gameToUpdate) {\r\n      console.error('No active game session');\r\n      return null;\r\n    }\r\n\r\n    const round = {\r\n      roundNumber: gameToUpdate.rounds.length + 1,\r\n      track_id: roundData.track?.id || '',\r\n      track_title: roundData.track?.title || '',\r\n      track_artist: roundData.track?.artists?.[0]?.name || '',\r\n      album_title: roundData.track?.album?.title || '',\r\n      user_guess: roundData.userGuess || '',\r\n      correct_answer: roundData.correctAnswer || '',\r\n      is_correct: roundData.isCorrect || false,\r\n      time_taken: roundData.timeTaken || 0,\r\n      points_earned: roundData.pointsEarned || 0,\r\n      timestamp: new Date()\r\n    };\r\n\r\n    const updatedGame = {\r\n      ...gameToUpdate,\r\n      rounds: [...gameToUpdate.rounds, round],\r\n      currentRound: gameToUpdate.currentRound + 1,\r\n      score: gameToUpdate.score + (round.points_earned || 0),\r\n      correctAnswers: gameToUpdate.correctAnswers + (round.is_correct ? 1 : 0)\r\n    };\r\n\r\n    // Update both ref and state\r\n    currentGameRef.current = updatedGame;\r\n    setCurrentGame(updatedGame);\r\n    \r\n    console.log('Updated game state:', {\r\n      id: updatedGame.id,\r\n      rounds: updatedGame.rounds.length,\r\n      score: updatedGame.score,\r\n      correctAnswers: updatedGame.correctAnswers\r\n    });\r\n    \r\n    return updatedGame;\r\n  };\r\n\r\n  // End the current game and save score\r\n  const endGame = async () => {\r\n    const gameToEnd = currentGameRef.current || currentGame;\r\n    \r\n    if (!gameToEnd) {\r\n      console.error('No active game session to end');\r\n      return null;\r\n    }\r\n\r\n    console.log('Ending game with current state:', {\r\n      id: gameToEnd.id,\r\n      rounds: gameToEnd.rounds.length,\r\n      score: gameToEnd.score,\r\n      correctAnswers: gameToEnd.correctAnswers\r\n    });\r\n\r\n    const finalGame = {\r\n      ...gameToEnd,\r\n      status: 'completed',\r\n      endTime: new Date(),\r\n      totalRounds: gameToEnd.rounds.length\r\n    };\r\n\r\n    // Save score if user is authenticated (before clearing currentGame)\r\n    let result = null;\r\n    if (isAuthenticated()) {\r\n      try {\r\n        result = await saveScore(finalGame);\r\n      } catch (error) {\r\n        console.error('Failed to save score:', error);\r\n        result = { saveError: error.message };\r\n      }\r\n    }\r\n\r\n    // Clear current game and update history after saving\r\n    currentGameRef.current = null;\r\n    setCurrentGame(null);\r\n    setGameHistory(prev => [finalGame, ...prev.slice(0, 9)]); // Keep last 10 games\r\n\r\n    return result ? { ...finalGame, serverResult: result } : finalGame;\r\n  };\r\n\r\n  // Save score to server\r\n  const saveScore = async (gameData) => {\r\n    if (!isAuthenticated()) {\r\n      throw new Error('User not authenticated');\r\n    }\r\n\r\n    const token = localStorage.getItem('tunegie_token');\r\n    if (!token) {\r\n      throw new Error('No authentication token');\r\n    }\r\n\r\n    const payload = {\r\n      total_rounds: gameData.totalRounds || gameData.rounds.length,\r\n      correct_answers: gameData.correctAnswers,\r\n      score: gameData.score,\r\n      game_mode: gameData.gameMode,\r\n      rounds: gameData.rounds.map(round => ({\r\n        track_id: round.track_id,\r\n        track_title: round.track_title,\r\n        track_artist: round.track_artist,\r\n        album_title: round.album_title,\r\n        user_guess: round.user_guess,\r\n        is_correct: round.is_correct,\r\n        time_taken: round.time_taken,\r\n        points_earned: round.points_earned\r\n      }))\r\n    };\r\n    \r\n    console.log('Sending score payload:', payload);\r\n\r\n    const response = await fetch(`${API_BASE}/backend/php/api/game/save_score.php`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`\r\n      },\r\n      body: JSON.stringify(payload)\r\n    });\r\n\r\n    const result = await response.json();\r\n    \r\n    console.log('Save score response:', { status: response.status, result });\r\n    \r\n    if (!response.ok) {\r\n      console.error('Save score error:', result);\r\n      throw new Error(result.error || `Failed to save score (${response.status})`);\r\n    }\r\n\r\n    return result;\r\n  };\r\n\r\n  // Calculate points for a round\r\n  const calculatePoints = (isCorrect, timeTaken, difficulty = 1) => {\r\n    if (!isCorrect) return 0;\r\n    \r\n    // Base points for correct answer\r\n    let points = 100 * difficulty;\r\n    \r\n    // Time bonus (faster = more points)\r\n    if (timeTaken <= 3) points += 50; // Very fast\r\n    else if (timeTaken <= 5) points += 30; // Fast\r\n    else if (timeTaken <= 10) points += 10; // Normal\r\n    \r\n    return Math.round(points);\r\n  };\r\n\r\n  // Get current game stats\r\n  const getCurrentStats = () => {\r\n    if (!currentGame) return null;\r\n    \r\n    const totalRounds = currentGame.rounds.length;\r\n    const accuracy = totalRounds > 0 ? (currentGame.correctAnswers / totalRounds) * 100 : 0;\r\n    \r\n    return {\r\n      rounds: totalRounds,\r\n      correct: currentGame.correctAnswers,\r\n      score: currentGame.score,\r\n      accuracy: Math.round(accuracy * 10) / 10 // Round to 1 decimal\r\n    };\r\n  };\r\n\r\n  // Abandon current game\r\n  const abandonGame = () => {\r\n    const gameToAbandon = currentGameRef.current || currentGame;\r\n    if (gameToAbandon) {\r\n      const abandonedGame = {\r\n        ...gameToAbandon,\r\n        status: 'abandoned',\r\n        endTime: new Date()\r\n      };\r\n      setGameHistory(prev => [abandonedGame, ...prev.slice(0, 9)]);\r\n    }\r\n    currentGameRef.current = null;\r\n    setCurrentGame(null);\r\n  };\r\n\r\n  const value = {\r\n    currentGame,\r\n    gameHistory,\r\n    startGame,\r\n    addRound,\r\n    endGame,\r\n    abandonGame,\r\n    calculatePoints,\r\n    getCurrentStats,\r\n    saveScore,\r\n    isGameActive: () => {\r\n      const game = currentGameRef.current || currentGame;\r\n      return game && game.status === 'active';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <GameContext.Provider value={value}>\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}