{"ast":null,"code":"var _jsxFileName = \"C:\\\\laragon\\\\www\\\\Tunegie\\\\frontend\\\\src\\\\components\\\\TrackPlayer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport itunesApiService from '../services/itunesApi';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TrackPlayer = ({\n  track,\n  difficulty = 'medium',\n  onSnippetEnd\n}) => {\n  _s();\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [hasPlayed, setHasPlayed] = useState(false);\n  const [audioReady, setAudioReady] = useState(false);\n  const [audioError, setAudioError] = useState(null);\n  const [previewInfo, setPreviewInfo] = useState(null);\n\n  // Get snippet duration based on difficulty\n  const getSnippetDuration = difficulty => {\n    switch (difficulty) {\n      case 'easy':\n        return 10;\n      case 'hard':\n        return 2;\n      case 'medium':\n      default:\n        return 5;\n    }\n  };\n  const snippetDuration = getSnippetDuration(difficulty);\n  const [snippetStart, setSnippetStart] = useState(() => {\n    // Start at random position within 30-second preview\n    const previewDuration = 30;\n    const maxStart = previewDuration - snippetDuration; // Ensure we don't go past preview\n    return Math.floor(Math.random() * Math.max(0, maxStart));\n  });\n  const audioRef = useRef(null);\n  const intervalRef = useRef(null);\n  const snippetTimeoutRef = useRef(null);\n\n  // Fetch preview URL when component loads\n  useEffect(() => {\n    const fetchPreview = async () => {\n      if (!track) return;\n      try {\n        var _track$artists, _track$artists$;\n        console.log(`🎵 Fetching preview for \"${track.title}\" by ${(_track$artists = track.artists) === null || _track$artists === void 0 ? void 0 : (_track$artists$ = _track$artists[0]) === null || _track$artists$ === void 0 ? void 0 : _track$artists$.name}...`);\n        const fetchedPreviewInfo = await itunesApiService.getTrackPreviewInfo(track);\n        if (fetchedPreviewInfo.canPreview && fetchedPreviewInfo.previewUrl) {\n          setPreviewInfo(fetchedPreviewInfo);\n          setAudioReady(true);\n          setAudioError(null);\n          console.log('✅ Preview found:', fetchedPreviewInfo.actualTrack, 'from', fetchedPreviewInfo.source);\n        } else {\n          setAudioError('No preview available for this track');\n          setAudioReady(false);\n          setPreviewInfo(null);\n          console.warn('⚠️ No preview URL available');\n        }\n      } catch (error) {\n        console.error('❌ Failed to fetch preview:', error);\n        setAudioError(error.message);\n        setAudioReady(false);\n      }\n    };\n    fetchPreview();\n\n    // Capture ref values at the time the effect runs\n    const currentAudio = audioRef.current;\n    const currentInterval = intervalRef.current;\n    const currentSnippetTimeout = snippetTimeoutRef.current;\n\n    // Cleanup on unmount\n    return () => {\n      if (currentAudio) {\n        currentAudio.pause();\n      }\n      if (currentInterval) {\n        clearInterval(currentInterval);\n      }\n      if (currentSnippetTimeout) {\n        clearTimeout(currentSnippetTimeout);\n      }\n    };\n  }, [track]);\n\n  // Reset when track changes\n  useEffect(() => {\n    setIsPlaying(false);\n    setCurrentTime(0);\n    setHasPlayed(false);\n    setPreviewInfo(null);\n\n    // Generate new random start position within preview\n    const previewDuration = 30;\n    const maxStart = previewDuration - snippetDuration;\n    const randomStart = Math.floor(Math.random() * maxStart);\n    setSnippetStart(randomStart);\n    if (audioRef.current) {\n      audioRef.current.pause();\n    }\n  }, [track === null || track === void 0 ? void 0 : track.id]);\n\n  // Play real audio preview\n  const playSnippet = async () => {\n    if (!track || !audioRef.current) {\n      console.error('❌ No track or audio ref available');\n      return;\n    }\n    if (!(previewInfo !== null && previewInfo !== void 0 && previewInfo.previewUrl) || !audioReady) {\n      console.warn('⚠️ No preview URL available for this track');\n      setAudioError('No preview available for this track');\n      return;\n    }\n    try {\n      setIsPlaying(true);\n      setHasPlayed(true);\n      setCurrentTime(0);\n      const audio = audioRef.current;\n\n      // Set up audio source and properties\n      audio.src = previewInfo.previewUrl;\n      audio.volume = 0.8;\n      audio.preload = 'auto';\n\n      // Wait for audio to load enough data\n      await new Promise((resolve, reject) => {\n        const onCanPlay = () => {\n          audio.removeEventListener('canplay', onCanPlay);\n          audio.removeEventListener('error', onError);\n          resolve();\n        };\n        const onError = e => {\n          audio.removeEventListener('canplay', onCanPlay);\n          audio.removeEventListener('error', onError);\n          reject(new Error('Audio failed to load'));\n        };\n        audio.addEventListener('canplay', onCanPlay);\n        audio.addEventListener('error', onError);\n\n        // If already ready, resolve immediately\n        if (audio.readyState >= 3) {\n          audio.removeEventListener('canplay', onCanPlay);\n          audio.removeEventListener('error', onError);\n          resolve();\n        }\n      });\n\n      // Set start time within preview\n      audio.currentTime = snippetStart;\n      await audio.play();\n\n      // Track progress with more precise timing\n      const startTime = performance.now();\n      const trackProgress = () => {\n        if (!isPlaying) return;\n        const elapsed = (performance.now() - startTime) / 1000;\n        if (elapsed >= snippetDuration) {\n          setCurrentTime(snippetDuration);\n          stopSnippet();\n          if (onSnippetEnd) onSnippetEnd();\n          return;\n        }\n        setCurrentTime(elapsed);\n        requestAnimationFrame(trackProgress);\n      };\n      requestAnimationFrame(trackProgress);\n\n      // Safety timeout to stop after exactly 5 seconds\n      snippetTimeoutRef.current = setTimeout(() => {\n        stopSnippet();\n        if (onSnippetEnd) onSnippetEnd();\n      }, snippetDuration * 1000);\n    } catch (error) {\n      console.error('🔴 Audio playback failed:', error);\n      setAudioError('Playback failed: ' + error.message);\n      setIsPlaying(false);\n    }\n  };\n  const stopSnippet = () => {\n    setIsPlaying(false);\n\n    // Stop audio playback\n    if (audioRef.current && !audioRef.current.paused) {\n      audioRef.current.pause();\n    }\n\n    // Clear timeout\n    if (snippetTimeoutRef.current) {\n      clearTimeout(snippetTimeoutRef.current);\n      snippetTimeoutRef.current = null;\n    }\n  };\n  const togglePlayback = () => {\n    if (isPlaying) {\n      stopSnippet();\n    } else {\n      playSnippet();\n    }\n  };\n  const generateNewSnippet = () => {\n    if (isPlaying) {\n      stopSnippet();\n    }\n\n    // Shuffle within the 30-second preview\n    const previewDuration = 30;\n    const maxStart = previewDuration - snippetDuration;\n    const newRandomStart = Math.floor(Math.random() * maxStart);\n    setSnippetStart(newRandomStart);\n    setCurrentTime(0);\n\n    // Automatically play the new snippet\n    setTimeout(() => playSnippet(), 100);\n  };\n\n  // Cleanup interval on unmount\n  useEffect(() => {\n    // Capture ref value at the time the effect runs\n    const currentInterval = intervalRef.current;\n    return () => {\n      if (currentInterval) {\n        clearInterval(currentInterval);\n      }\n    };\n  }, []);\n  const formatTime = seconds => {\n    return `${Math.floor(seconds)}s`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-black/50 rounded-lg p-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-green-200/60 text-sm\",\n          children: \"Audio Snippet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-green-400 font-semibold text-lg\",\n          children: (_track$album => {\n            const albumTitle = (track === null || track === void 0 ? void 0 : (_track$album = track.album) === null || _track$album === void 0 ? void 0 : _track$album.title) || 'Unknown Album';\n            const trackTitle = (track === null || track === void 0 ? void 0 : track.title) || '';\n\n            // Enhanced single detection - same logic as in Game.js\n            const isSingle = albumTitle.toLowerCase().includes('single') || albumTitle.toLowerCase() === trackTitle.toLowerCase() || albumTitle.toLowerCase().includes(' - single') || albumTitle.toLowerCase().includes('(single)') || albumTitle.toLowerCase().includes('- ep') || albumTitle.toLowerCase().includes('(ep)') ||\n            // Check if album title contains the track title (likely a single)\n            albumTitle.toLowerCase().includes(trackTitle.toLowerCase()) ||\n            // Check if track title contains album title (reverse case)\n            trackTitle.toLowerCase().includes(albumTitle.toLowerCase()) ||\n            // Common single indicators\n            albumTitle.toLowerCase().includes('remix') || albumTitle.toLowerCase().includes('feat.') || albumTitle.toLowerCase().includes('featuring') ||\n            // If album has very few tracks, likely a single/EP\n            albumTitle.split(' ').length <= 3;\n            return isSingle ? 'Single Release' : albumTitle;\n          })()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-green-200/80 text-xs mt-1\",\n          children: [\"Playing from 0:\", snippetStart.toString().padStart(2, '0'), \" - 0:\", (snippetStart + snippetDuration).toString().padStart(2, '0')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this), audioError && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4 p-2 bg-red-600/20 border border-red-500/30 rounded\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-red-300 text-xs\",\n          children: [\"\\u274C \", audioError]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 11\n      }, this), audioReady && (previewInfo === null || previewInfo === void 0 ? void 0 : previewInfo.previewUrl) && !audioError && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4 p-2 bg-green-600/20 border border-green-500/30 rounded\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-green-300 text-xs\",\n          children: \"\\uD83C\\uDFB5 Audio preview ready! Click play to hear 5 seconds.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 11\n      }, this), !previewInfo && !audioError && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4 p-2 bg-yellow-600/20 border border-yellow-500/30 rounded\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-yellow-300 text-xs\",\n          children: \"\\uD83D\\uDD0D Searching for preview across multiple sources...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex gap-4 justify-center mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: togglePlayback,\n          className: `w-16 h-16 rounded-full flex items-center justify-center text-2xl font-bold transition ${isPlaying ? 'bg-red-600 hover:bg-red-500 text-white' : 'bg-green-600 hover:bg-green-500 text-black'}`,\n          title: isPlaying ? 'Stop' : hasPlayed ? 'Play Again' : 'Play 5s Snippet',\n          children: isPlaying ? '⏹️' : '▶️'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 11\n        }, this), hasPlayed && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: generateNewSnippet,\n          className: \"w-16 h-16 rounded-full flex items-center justify-center text-xl font-bold transition bg-blue-600 hover:bg-blue-500 text-white\",\n          title: \"Play Different Part of Song\",\n          children: \"\\uD83D\\uDD00\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-full bg-gray-700 rounded-full h-2 mb-2\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-green-500 h-2 rounded-full transition-all duration-100\",\n            style: {\n              width: `${currentTime / snippetDuration * 100}%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-green-300 text-sm\",\n          children: [formatTime(currentTime), \" / \", formatTime(snippetDuration)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-green-600/20 border border-green-500/30 rounded-lg p-3 mt-4\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-green-300 text-xs\",\n          children: [audioReady && previewInfo !== null && previewInfo !== void 0 && previewInfo.previewUrl ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [\"\\uD83C\\uDFB5 \", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Audio Preview:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 353,\n              columnNumber: 20\n            }, this), \" 30-second snippet ready to play!\"]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [\"\\u26A0\\uFE0F \", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"No Audio:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 20\n            }, this), \" Preview not available for this track.\"]\n          }, void 0, true), hasPlayed && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"block mt-1\",\n            children: \"Listen carefully and make your best guess!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 27\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 9\n      }, this), hasPlayed && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-green-400 text-sm mt-3\",\n        children: \"\\u2728 Snippet played! Now make your guess based on what you heard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef,\n      style: {\n        display: 'none'\n      },\n      onEnded: stopSnippet,\n      crossOrigin: \"anonymous\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 249,\n    columnNumber: 5\n  }, this);\n};\n_s(TrackPlayer, \"6nMY9rTwqCSsGdq3dsZ3osoEEKU=\");\n_c = TrackPlayer;\nexport default TrackPlayer;\nvar _c;\n$RefreshReg$(_c, \"TrackPlayer\");","map":{"version":3,"names":["React","useState","useRef","useEffect","itunesApiService","jsxDEV","_jsxDEV","Fragment","_Fragment","TrackPlayer","track","difficulty","onSnippetEnd","_s","isPlaying","setIsPlaying","currentTime","setCurrentTime","hasPlayed","setHasPlayed","audioReady","setAudioReady","audioError","setAudioError","previewInfo","setPreviewInfo","getSnippetDuration","snippetDuration","snippetStart","setSnippetStart","previewDuration","maxStart","Math","floor","random","max","audioRef","intervalRef","snippetTimeoutRef","fetchPreview","_track$artists","_track$artists$","console","log","title","artists","name","fetchedPreviewInfo","getTrackPreviewInfo","canPreview","previewUrl","actualTrack","source","warn","error","message","currentAudio","current","currentInterval","currentSnippetTimeout","pause","clearInterval","clearTimeout","randomStart","id","playSnippet","audio","src","volume","preload","Promise","resolve","reject","onCanPlay","removeEventListener","onError","e","Error","addEventListener","readyState","play","startTime","performance","now","trackProgress","elapsed","stopSnippet","requestAnimationFrame","setTimeout","paused","togglePlayback","generateNewSnippet","newRandomStart","formatTime","seconds","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_track$album","albumTitle","album","trackTitle","isSingle","toLowerCase","includes","split","length","toString","padStart","onClick","style","width","ref","display","onEnded","crossOrigin","_c","$RefreshReg$"],"sources":["C:/laragon/www/Tunegie/frontend/src/components/TrackPlayer.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport itunesApiService from '../services/itunesApi';\r\n\r\nconst TrackPlayer = ({ track, difficulty = 'medium', onSnippetEnd }) => {\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [currentTime, setCurrentTime] = useState(0);\r\n  const [hasPlayed, setHasPlayed] = useState(false);\r\n  const [audioReady, setAudioReady] = useState(false);\r\n  const [audioError, setAudioError] = useState(null);\r\n  const [previewInfo, setPreviewInfo] = useState(null);\r\n  \r\n  // Get snippet duration based on difficulty\r\n  const getSnippetDuration = (difficulty) => {\r\n    switch(difficulty) {\r\n      case 'easy': return 10;\r\n      case 'hard': return 2;\r\n      case 'medium':\r\n      default: return 5;\r\n    }\r\n  };\r\n  \r\n  const snippetDuration = getSnippetDuration(difficulty);\r\n  \r\n  const [snippetStart, setSnippetStart] = useState(() => {\r\n    // Start at random position within 30-second preview\r\n    const previewDuration = 30;\r\n    const maxStart = previewDuration - snippetDuration; // Ensure we don't go past preview\r\n    return Math.floor(Math.random() * Math.max(0, maxStart));\r\n  });\r\n  \r\n  const audioRef = useRef(null);\r\n  const intervalRef = useRef(null);\r\n  const snippetTimeoutRef = useRef(null);\r\n\r\n  // Fetch preview URL when component loads\r\n  useEffect(() => {\r\n    const fetchPreview = async () => {\r\n      if (!track) return;\r\n      \r\n      try {\r\n        console.log(`🎵 Fetching preview for \"${track.title}\" by ${track.artists?.[0]?.name}...`);\r\n        \r\n        const fetchedPreviewInfo = await itunesApiService.getTrackPreviewInfo(track);\r\n        \r\n        if (fetchedPreviewInfo.canPreview && fetchedPreviewInfo.previewUrl) {\r\n          setPreviewInfo(fetchedPreviewInfo);\r\n          setAudioReady(true);\r\n          setAudioError(null);\r\n          console.log('✅ Preview found:', fetchedPreviewInfo.actualTrack, 'from', fetchedPreviewInfo.source);\r\n        } else {\r\n          setAudioError('No preview available for this track');\r\n          setAudioReady(false);\r\n          setPreviewInfo(null);\r\n          console.warn('⚠️ No preview URL available');\r\n        }\r\n      } catch (error) {\r\n        console.error('❌ Failed to fetch preview:', error);\r\n        setAudioError(error.message);\r\n        setAudioReady(false);\r\n      }\r\n    };\r\n\r\n    fetchPreview();\r\n\r\n    // Capture ref values at the time the effect runs\r\n    const currentAudio = audioRef.current;\r\n    const currentInterval = intervalRef.current;\r\n    const currentSnippetTimeout = snippetTimeoutRef.current;\r\n\r\n    // Cleanup on unmount\r\n    return () => {\r\n      if (currentAudio) {\r\n        currentAudio.pause();\r\n      }\r\n      if (currentInterval) {\r\n        clearInterval(currentInterval);\r\n      }\r\n      if (currentSnippetTimeout) {\r\n        clearTimeout(currentSnippetTimeout);\r\n      }\r\n    };\r\n  }, [track]);\r\n\r\n  // Reset when track changes\r\n  useEffect(() => {\r\n    setIsPlaying(false);\r\n    setCurrentTime(0);\r\n    setHasPlayed(false);\r\n    setPreviewInfo(null);\r\n    \r\n    // Generate new random start position within preview\r\n    const previewDuration = 30;\r\n    const maxStart = previewDuration - snippetDuration;\r\n    const randomStart = Math.floor(Math.random() * maxStart);\r\n    setSnippetStart(randomStart);\r\n    \r\n    if (audioRef.current) {\r\n      audioRef.current.pause();\r\n    }\r\n  }, [track?.id]);\r\n\r\n\r\n  // Play real audio preview\r\n  const playSnippet = async () => {\r\n    if (!track || !audioRef.current) {\r\n      console.error('❌ No track or audio ref available');\r\n      return;\r\n    }\r\n\r\n    if (!previewInfo?.previewUrl || !audioReady) {\r\n      console.warn('⚠️ No preview URL available for this track');\r\n      setAudioError('No preview available for this track');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsPlaying(true);\r\n      setHasPlayed(true);\r\n      setCurrentTime(0);\r\n      \r\n      const audio = audioRef.current;\r\n      \r\n      // Set up audio source and properties\r\n      audio.src = previewInfo.previewUrl;\r\n      audio.volume = 0.8;\r\n      audio.preload = 'auto';\r\n      \r\n      // Wait for audio to load enough data\r\n      await new Promise((resolve, reject) => {\r\n        const onCanPlay = () => {\r\n          audio.removeEventListener('canplay', onCanPlay);\r\n          audio.removeEventListener('error', onError);\r\n          resolve();\r\n        };\r\n        \r\n        const onError = (e) => {\r\n          audio.removeEventListener('canplay', onCanPlay);\r\n          audio.removeEventListener('error', onError);\r\n          reject(new Error('Audio failed to load'));\r\n        };\r\n        \r\n        audio.addEventListener('canplay', onCanPlay);\r\n        audio.addEventListener('error', onError);\r\n        \r\n        // If already ready, resolve immediately\r\n        if (audio.readyState >= 3) {\r\n          audio.removeEventListener('canplay', onCanPlay);\r\n          audio.removeEventListener('error', onError);\r\n          resolve();\r\n        }\r\n      });\r\n      \r\n      // Set start time within preview\r\n      audio.currentTime = snippetStart;\r\n      await audio.play();\r\n      \r\n      // Track progress with more precise timing\r\n      const startTime = performance.now();\r\n      const trackProgress = () => {\r\n        if (!isPlaying) return;\r\n        \r\n        const elapsed = (performance.now() - startTime) / 1000;\r\n        \r\n        if (elapsed >= snippetDuration) {\r\n          setCurrentTime(snippetDuration);\r\n          stopSnippet();\r\n          if (onSnippetEnd) onSnippetEnd();\r\n          return;\r\n        }\r\n        \r\n        setCurrentTime(elapsed);\r\n        requestAnimationFrame(trackProgress);\r\n      };\r\n      \r\n      requestAnimationFrame(trackProgress);\r\n      \r\n      // Safety timeout to stop after exactly 5 seconds\r\n      snippetTimeoutRef.current = setTimeout(() => {\r\n        stopSnippet();\r\n        if (onSnippetEnd) onSnippetEnd();\r\n      }, snippetDuration * 1000);\r\n      \r\n    } catch (error) {\r\n      console.error('🔴 Audio playback failed:', error);\r\n      setAudioError('Playback failed: ' + error.message);\r\n      setIsPlaying(false);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  const stopSnippet = () => {\r\n    setIsPlaying(false);\r\n    \r\n    // Stop audio playback\r\n    if (audioRef.current && !audioRef.current.paused) {\r\n      audioRef.current.pause();\r\n    }\r\n    \r\n    // Clear timeout\r\n    if (snippetTimeoutRef.current) {\r\n      clearTimeout(snippetTimeoutRef.current);\r\n      snippetTimeoutRef.current = null;\r\n    }\r\n  };\r\n\r\n  const togglePlayback = () => {\r\n    if (isPlaying) {\r\n      stopSnippet();\r\n    } else {\r\n      playSnippet();\r\n    }\r\n  };\r\n  \r\n  const generateNewSnippet = () => {\r\n    if (isPlaying) {\r\n      stopSnippet();\r\n    }\r\n    \r\n    // Shuffle within the 30-second preview\r\n    const previewDuration = 30;\r\n    const maxStart = previewDuration - snippetDuration;\r\n    const newRandomStart = Math.floor(Math.random() * maxStart);\r\n    \r\n    setSnippetStart(newRandomStart);\r\n    setCurrentTime(0);\r\n    \r\n    // Automatically play the new snippet\r\n    setTimeout(() => playSnippet(), 100);\r\n  };\r\n\r\n  // Cleanup interval on unmount\r\n  useEffect(() => {\r\n    // Capture ref value at the time the effect runs\r\n    const currentInterval = intervalRef.current;\r\n    \r\n    return () => {\r\n      if (currentInterval) {\r\n        clearInterval(currentInterval);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const formatTime = (seconds) => {\r\n    return `${Math.floor(seconds)}s`;\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-black/50 rounded-lg p-6\">\r\n      <div className=\"text-center\">\r\n        <div className=\"mb-4\">\r\n          <p className=\"text-green-200/60 text-sm\">Audio Snippet</p>\r\n          <p className=\"text-green-400 font-semibold text-lg\">\r\n            {(() => {\r\n              const albumTitle = track?.album?.title || 'Unknown Album';\r\n              const trackTitle = track?.title || '';\r\n              \r\n              // Enhanced single detection - same logic as in Game.js\r\n              const isSingle = \r\n                albumTitle.toLowerCase().includes('single') ||\r\n                albumTitle.toLowerCase() === trackTitle.toLowerCase() ||\r\n                albumTitle.toLowerCase().includes(' - single') ||\r\n                albumTitle.toLowerCase().includes('(single)') ||\r\n                albumTitle.toLowerCase().includes('- ep') ||\r\n                albumTitle.toLowerCase().includes('(ep)') ||\r\n                // Check if album title contains the track title (likely a single)\r\n                albumTitle.toLowerCase().includes(trackTitle.toLowerCase()) ||\r\n                // Check if track title contains album title (reverse case)\r\n                trackTitle.toLowerCase().includes(albumTitle.toLowerCase()) ||\r\n                // Common single indicators\r\n                albumTitle.toLowerCase().includes('remix') ||\r\n                albumTitle.toLowerCase().includes('feat.') ||\r\n                albumTitle.toLowerCase().includes('featuring') ||\r\n                // If album has very few tracks, likely a single/EP\r\n                albumTitle.split(' ').length <= 3;\r\n              \r\n              return isSingle ? 'Single Release' : albumTitle;\r\n            })()}\r\n          </p>\r\n          <p className=\"text-green-200/80 text-xs mt-1\">\r\n            Playing from 0:{snippetStart.toString().padStart(2,'0')} - 0:{(snippetStart + snippetDuration).toString().padStart(2,'0')}\r\n          </p>\r\n        </div>\r\n        \r\n        {/* Audio Status */}\r\n        {audioError && (\r\n          <div className=\"mb-4 p-2 bg-red-600/20 border border-red-500/30 rounded\">\r\n            <p className=\"text-red-300 text-xs\">\r\n              ❌ {audioError}\r\n            </p>\r\n          </div>\r\n        )}\r\n        \r\n        {audioReady && previewInfo?.previewUrl && !audioError && (\r\n          <div className=\"mb-4 p-2 bg-green-600/20 border border-green-500/30 rounded\">\r\n            <p className=\"text-green-300 text-xs\">\r\n              🎵 Audio preview ready! Click play to hear 5 seconds.\r\n            </p>\r\n          </div>\r\n        )}\r\n        \r\n        {!previewInfo && !audioError && (\r\n          <div className=\"mb-4 p-2 bg-yellow-600/20 border border-yellow-500/30 rounded\">\r\n            <p className=\"text-yellow-300 text-xs\">\r\n              🔍 Searching for preview across multiple sources...\r\n            </p>\r\n          </div>\r\n        )}\r\n        \r\n        \r\n        {/* Play Buttons */}\r\n        <div className=\"flex gap-4 justify-center mb-4\">\r\n          <button\r\n            onClick={togglePlayback}\r\n            className={`w-16 h-16 rounded-full flex items-center justify-center text-2xl font-bold transition ${\r\n              isPlaying\r\n                ? 'bg-red-600 hover:bg-red-500 text-white'\r\n                : 'bg-green-600 hover:bg-green-500 text-black'\r\n            }`}\r\n            title={isPlaying ? 'Stop' : hasPlayed ? 'Play Again' : 'Play 5s Snippet'}\r\n          >\r\n            {isPlaying ? '⏹️' : '▶️'}\r\n          </button>\r\n          \r\n          {hasPlayed && (\r\n            <button\r\n              onClick={generateNewSnippet}\r\n              className=\"w-16 h-16 rounded-full flex items-center justify-center text-xl font-bold transition bg-blue-600 hover:bg-blue-500 text-white\"\r\n              title=\"Play Different Part of Song\"\r\n            >\r\n              🔀\r\n            </button>\r\n          )}\r\n        </div>\r\n\r\n        {/* Progress Bar */}\r\n        <div className=\"mb-2\">\r\n          <div className=\"w-full bg-gray-700 rounded-full h-2 mb-2\">\r\n            <div \r\n              className=\"bg-green-500 h-2 rounded-full transition-all duration-100\"\r\n              style={{ width: `${(currentTime / snippetDuration) * 100}%` }}\r\n            ></div>\r\n          </div>\r\n          <p className=\"text-green-300 text-sm\">\r\n            {formatTime(currentTime)} / {formatTime(snippetDuration)}\r\n          </p>\r\n        </div>\r\n\r\n        {/* Audio Info */}\r\n        <div className=\"bg-green-600/20 border border-green-500/30 rounded-lg p-3 mt-4\">\r\n          <p className=\"text-green-300 text-xs\">\r\n            {audioReady && previewInfo?.previewUrl ? (\r\n              <>🎵 <strong>Audio Preview:</strong> 30-second snippet ready to play!</>\r\n            ) : (\r\n              <>⚠️ <strong>No Audio:</strong> Preview not available for this track.</>\r\n            )}\r\n            {hasPlayed && <span className=\"block mt-1\">Listen carefully and make your best guess!</span>}\r\n          </p>\r\n          \r\n        </div>\r\n\r\n        {hasPlayed && (\r\n          <p className=\"text-green-400 text-sm mt-3\">\r\n            ✨ Snippet played! Now make your guess based on what you heard\r\n          </p>\r\n        )}\r\n      </div>\r\n\r\n      {/* Audio element for preview playback */}\r\n      <audio\r\n        ref={audioRef}\r\n        style={{ display: 'none' }}\r\n        onEnded={stopSnippet}\r\n        crossOrigin=\"anonymous\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TrackPlayer;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAOC,gBAAgB,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAErD,MAAMC,WAAW,GAAGA,CAAC;EAAEC,KAAK;EAAEC,UAAU,GAAG,QAAQ;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EACtE,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACe,WAAW,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACiB,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACmB,UAAU,EAAEC,aAAa,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACqB,UAAU,EAAEC,aAAa,CAAC,GAAGtB,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACuB,WAAW,EAAEC,cAAc,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC;;EAEpD;EACA,MAAMyB,kBAAkB,GAAIf,UAAU,IAAK;IACzC,QAAOA,UAAU;MACf,KAAK,MAAM;QAAE,OAAO,EAAE;MACtB,KAAK,MAAM;QAAE,OAAO,CAAC;MACrB,KAAK,QAAQ;MACb;QAAS,OAAO,CAAC;IACnB;EACF,CAAC;EAED,MAAMgB,eAAe,GAAGD,kBAAkB,CAACf,UAAU,CAAC;EAEtD,MAAM,CAACiB,YAAY,EAAEC,eAAe,CAAC,GAAG5B,QAAQ,CAAC,MAAM;IACrD;IACA,MAAM6B,eAAe,GAAG,EAAE;IAC1B,MAAMC,QAAQ,GAAGD,eAAe,GAAGH,eAAe,CAAC,CAAC;IACpD,OAAOK,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGF,IAAI,CAACG,GAAG,CAAC,CAAC,EAAEJ,QAAQ,CAAC,CAAC;EAC1D,CAAC,CAAC;EAEF,MAAMK,QAAQ,GAAGlC,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMmC,WAAW,GAAGnC,MAAM,CAAC,IAAI,CAAC;EAChC,MAAMoC,iBAAiB,GAAGpC,MAAM,CAAC,IAAI,CAAC;;EAEtC;EACAC,SAAS,CAAC,MAAM;IACd,MAAMoC,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI,CAAC7B,KAAK,EAAE;MAEZ,IAAI;QAAA,IAAA8B,cAAA,EAAAC,eAAA;QACFC,OAAO,CAACC,GAAG,CAAC,4BAA4BjC,KAAK,CAACkC,KAAK,SAAAJ,cAAA,GAAQ9B,KAAK,CAACmC,OAAO,cAAAL,cAAA,wBAAAC,eAAA,GAAbD,cAAA,CAAgB,CAAC,CAAC,cAAAC,eAAA,uBAAlBA,eAAA,CAAoBK,IAAI,KAAK,CAAC;QAEzF,MAAMC,kBAAkB,GAAG,MAAM3C,gBAAgB,CAAC4C,mBAAmB,CAACtC,KAAK,CAAC;QAE5E,IAAIqC,kBAAkB,CAACE,UAAU,IAAIF,kBAAkB,CAACG,UAAU,EAAE;UAClEzB,cAAc,CAACsB,kBAAkB,CAAC;UAClC1B,aAAa,CAAC,IAAI,CAAC;UACnBE,aAAa,CAAC,IAAI,CAAC;UACnBmB,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEI,kBAAkB,CAACI,WAAW,EAAE,MAAM,EAAEJ,kBAAkB,CAACK,MAAM,CAAC;QACpG,CAAC,MAAM;UACL7B,aAAa,CAAC,qCAAqC,CAAC;UACpDF,aAAa,CAAC,KAAK,CAAC;UACpBI,cAAc,CAAC,IAAI,CAAC;UACpBiB,OAAO,CAACW,IAAI,CAAC,6BAA6B,CAAC;QAC7C;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdZ,OAAO,CAACY,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClD/B,aAAa,CAAC+B,KAAK,CAACC,OAAO,CAAC;QAC5BlC,aAAa,CAAC,KAAK,CAAC;MACtB;IACF,CAAC;IAEDkB,YAAY,CAAC,CAAC;;IAEd;IACA,MAAMiB,YAAY,GAAGpB,QAAQ,CAACqB,OAAO;IACrC,MAAMC,eAAe,GAAGrB,WAAW,CAACoB,OAAO;IAC3C,MAAME,qBAAqB,GAAGrB,iBAAiB,CAACmB,OAAO;;IAEvD;IACA,OAAO,MAAM;MACX,IAAID,YAAY,EAAE;QAChBA,YAAY,CAACI,KAAK,CAAC,CAAC;MACtB;MACA,IAAIF,eAAe,EAAE;QACnBG,aAAa,CAACH,eAAe,CAAC;MAChC;MACA,IAAIC,qBAAqB,EAAE;QACzBG,YAAY,CAACH,qBAAqB,CAAC;MACrC;IACF,CAAC;EACH,CAAC,EAAE,CAACjD,KAAK,CAAC,CAAC;;EAEX;EACAP,SAAS,CAAC,MAAM;IACdY,YAAY,CAAC,KAAK,CAAC;IACnBE,cAAc,CAAC,CAAC,CAAC;IACjBE,YAAY,CAAC,KAAK,CAAC;IACnBM,cAAc,CAAC,IAAI,CAAC;;IAEpB;IACA,MAAMK,eAAe,GAAG,EAAE;IAC1B,MAAMC,QAAQ,GAAGD,eAAe,GAAGH,eAAe;IAClD,MAAMoC,WAAW,GAAG/B,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGH,QAAQ,CAAC;IACxDF,eAAe,CAACkC,WAAW,CAAC;IAE5B,IAAI3B,QAAQ,CAACqB,OAAO,EAAE;MACpBrB,QAAQ,CAACqB,OAAO,CAACG,KAAK,CAAC,CAAC;IAC1B;EACF,CAAC,EAAE,CAAClD,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEsD,EAAE,CAAC,CAAC;;EAGf;EACA,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI,CAACvD,KAAK,IAAI,CAAC0B,QAAQ,CAACqB,OAAO,EAAE;MAC/Bf,OAAO,CAACY,KAAK,CAAC,mCAAmC,CAAC;MAClD;IACF;IAEA,IAAI,EAAC9B,WAAW,aAAXA,WAAW,eAAXA,WAAW,CAAE0B,UAAU,KAAI,CAAC9B,UAAU,EAAE;MAC3CsB,OAAO,CAACW,IAAI,CAAC,4CAA4C,CAAC;MAC1D9B,aAAa,CAAC,qCAAqC,CAAC;MACpD;IACF;IAEA,IAAI;MACFR,YAAY,CAAC,IAAI,CAAC;MAClBI,YAAY,CAAC,IAAI,CAAC;MAClBF,cAAc,CAAC,CAAC,CAAC;MAEjB,MAAMiD,KAAK,GAAG9B,QAAQ,CAACqB,OAAO;;MAE9B;MACAS,KAAK,CAACC,GAAG,GAAG3C,WAAW,CAAC0B,UAAU;MAClCgB,KAAK,CAACE,MAAM,GAAG,GAAG;MAClBF,KAAK,CAACG,OAAO,GAAG,MAAM;;MAEtB;MACA,MAAM,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACrC,MAAMC,SAAS,GAAGA,CAAA,KAAM;UACtBP,KAAK,CAACQ,mBAAmB,CAAC,SAAS,EAAED,SAAS,CAAC;UAC/CP,KAAK,CAACQ,mBAAmB,CAAC,OAAO,EAAEC,OAAO,CAAC;UAC3CJ,OAAO,CAAC,CAAC;QACX,CAAC;QAED,MAAMI,OAAO,GAAIC,CAAC,IAAK;UACrBV,KAAK,CAACQ,mBAAmB,CAAC,SAAS,EAAED,SAAS,CAAC;UAC/CP,KAAK,CAACQ,mBAAmB,CAAC,OAAO,EAAEC,OAAO,CAAC;UAC3CH,MAAM,CAAC,IAAIK,KAAK,CAAC,sBAAsB,CAAC,CAAC;QAC3C,CAAC;QAEDX,KAAK,CAACY,gBAAgB,CAAC,SAAS,EAAEL,SAAS,CAAC;QAC5CP,KAAK,CAACY,gBAAgB,CAAC,OAAO,EAAEH,OAAO,CAAC;;QAExC;QACA,IAAIT,KAAK,CAACa,UAAU,IAAI,CAAC,EAAE;UACzBb,KAAK,CAACQ,mBAAmB,CAAC,SAAS,EAAED,SAAS,CAAC;UAC/CP,KAAK,CAACQ,mBAAmB,CAAC,OAAO,EAAEC,OAAO,CAAC;UAC3CJ,OAAO,CAAC,CAAC;QACX;MACF,CAAC,CAAC;;MAEF;MACAL,KAAK,CAAClD,WAAW,GAAGY,YAAY;MAChC,MAAMsC,KAAK,CAACc,IAAI,CAAC,CAAC;;MAElB;MACA,MAAMC,SAAS,GAAGC,WAAW,CAACC,GAAG,CAAC,CAAC;MACnC,MAAMC,aAAa,GAAGA,CAAA,KAAM;QAC1B,IAAI,CAACtE,SAAS,EAAE;QAEhB,MAAMuE,OAAO,GAAG,CAACH,WAAW,CAACC,GAAG,CAAC,CAAC,GAAGF,SAAS,IAAI,IAAI;QAEtD,IAAII,OAAO,IAAI1D,eAAe,EAAE;UAC9BV,cAAc,CAACU,eAAe,CAAC;UAC/B2D,WAAW,CAAC,CAAC;UACb,IAAI1E,YAAY,EAAEA,YAAY,CAAC,CAAC;UAChC;QACF;QAEAK,cAAc,CAACoE,OAAO,CAAC;QACvBE,qBAAqB,CAACH,aAAa,CAAC;MACtC,CAAC;MAEDG,qBAAqB,CAACH,aAAa,CAAC;;MAEpC;MACA9C,iBAAiB,CAACmB,OAAO,GAAG+B,UAAU,CAAC,MAAM;QAC3CF,WAAW,CAAC,CAAC;QACb,IAAI1E,YAAY,EAAEA,YAAY,CAAC,CAAC;MAClC,CAAC,EAAEe,eAAe,GAAG,IAAI,CAAC;IAE5B,CAAC,CAAC,OAAO2B,KAAK,EAAE;MACdZ,OAAO,CAACY,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD/B,aAAa,CAAC,mBAAmB,GAAG+B,KAAK,CAACC,OAAO,CAAC;MAClDxC,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAID,MAAMuE,WAAW,GAAGA,CAAA,KAAM;IACxBvE,YAAY,CAAC,KAAK,CAAC;;IAEnB;IACA,IAAIqB,QAAQ,CAACqB,OAAO,IAAI,CAACrB,QAAQ,CAACqB,OAAO,CAACgC,MAAM,EAAE;MAChDrD,QAAQ,CAACqB,OAAO,CAACG,KAAK,CAAC,CAAC;IAC1B;;IAEA;IACA,IAAItB,iBAAiB,CAACmB,OAAO,EAAE;MAC7BK,YAAY,CAACxB,iBAAiB,CAACmB,OAAO,CAAC;MACvCnB,iBAAiB,CAACmB,OAAO,GAAG,IAAI;IAClC;EACF,CAAC;EAED,MAAMiC,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAI5E,SAAS,EAAE;MACbwE,WAAW,CAAC,CAAC;IACf,CAAC,MAAM;MACLrB,WAAW,CAAC,CAAC;IACf;EACF,CAAC;EAED,MAAM0B,kBAAkB,GAAGA,CAAA,KAAM;IAC/B,IAAI7E,SAAS,EAAE;MACbwE,WAAW,CAAC,CAAC;IACf;;IAEA;IACA,MAAMxD,eAAe,GAAG,EAAE;IAC1B,MAAMC,QAAQ,GAAGD,eAAe,GAAGH,eAAe;IAClD,MAAMiE,cAAc,GAAG5D,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGH,QAAQ,CAAC;IAE3DF,eAAe,CAAC+D,cAAc,CAAC;IAC/B3E,cAAc,CAAC,CAAC,CAAC;;IAEjB;IACAuE,UAAU,CAAC,MAAMvB,WAAW,CAAC,CAAC,EAAE,GAAG,CAAC;EACtC,CAAC;;EAED;EACA9D,SAAS,CAAC,MAAM;IACd;IACA,MAAMuD,eAAe,GAAGrB,WAAW,CAACoB,OAAO;IAE3C,OAAO,MAAM;MACX,IAAIC,eAAe,EAAE;QACnBG,aAAa,CAACH,eAAe,CAAC;MAChC;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMmC,UAAU,GAAIC,OAAO,IAAK;IAC9B,OAAO,GAAG9D,IAAI,CAACC,KAAK,CAAC6D,OAAO,CAAC,GAAG;EAClC,CAAC;EAED,oBACExF,OAAA;IAAKyF,SAAS,EAAC,4BAA4B;IAAAC,QAAA,gBACzC1F,OAAA;MAAKyF,SAAS,EAAC,aAAa;MAAAC,QAAA,gBAC1B1F,OAAA;QAAKyF,SAAS,EAAC,MAAM;QAAAC,QAAA,gBACnB1F,OAAA;UAAGyF,SAAS,EAAC,2BAA2B;UAAAC,QAAA,EAAC;QAAa;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eAC1D9F,OAAA;UAAGyF,SAAS,EAAC,sCAAsC;UAAAC,QAAA,EAChD,CAACK,YAAA,IAAM;YACN,MAAMC,UAAU,GAAG,CAAA5F,KAAK,aAALA,KAAK,wBAAA2F,YAAA,GAAL3F,KAAK,CAAE6F,KAAK,cAAAF,YAAA,uBAAZA,YAAA,CAAczD,KAAK,KAAI,eAAe;YACzD,MAAM4D,UAAU,GAAG,CAAA9F,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEkC,KAAK,KAAI,EAAE;;YAErC;YACA,MAAM6D,QAAQ,GACZH,UAAU,CAACI,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,QAAQ,CAAC,IAC3CL,UAAU,CAACI,WAAW,CAAC,CAAC,KAAKF,UAAU,CAACE,WAAW,CAAC,CAAC,IACrDJ,UAAU,CAACI,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,WAAW,CAAC,IAC9CL,UAAU,CAACI,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,UAAU,CAAC,IAC7CL,UAAU,CAACI,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,MAAM,CAAC,IACzCL,UAAU,CAACI,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,MAAM,CAAC;YACzC;YACAL,UAAU,CAACI,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACH,UAAU,CAACE,WAAW,CAAC,CAAC,CAAC;YAC3D;YACAF,UAAU,CAACE,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACL,UAAU,CAACI,WAAW,CAAC,CAAC,CAAC;YAC3D;YACAJ,UAAU,CAACI,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,OAAO,CAAC,IAC1CL,UAAU,CAACI,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,OAAO,CAAC,IAC1CL,UAAU,CAACI,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,WAAW,CAAC;YAC9C;YACAL,UAAU,CAACM,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,IAAI,CAAC;YAEnC,OAAOJ,QAAQ,GAAG,gBAAgB,GAAGH,UAAU;UACjD,CAAC,EAAE;QAAC;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eACJ9F,OAAA;UAAGyF,SAAS,EAAC,gCAAgC;UAAAC,QAAA,GAAC,iBAC7B,EAACpE,YAAY,CAACkF,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAC,GAAG,CAAC,EAAC,OAAK,EAAC,CAACnF,YAAY,GAAGD,eAAe,EAAEmF,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAC,GAAG,CAAC;QAAA;UAAAd,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxH,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,EAGL9E,UAAU,iBACThB,OAAA;QAAKyF,SAAS,EAAC,yDAAyD;QAAAC,QAAA,eACtE1F,OAAA;UAAGyF,SAAS,EAAC,sBAAsB;UAAAC,QAAA,GAAC,SAChC,EAAC1E,UAAU;QAAA;UAAA2E,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACZ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CACN,EAEAhF,UAAU,KAAII,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAE0B,UAAU,KAAI,CAAC5B,UAAU,iBACnDhB,OAAA;QAAKyF,SAAS,EAAC,6DAA6D;QAAAC,QAAA,eAC1E1F,OAAA;UAAGyF,SAAS,EAAC,wBAAwB;UAAAC,QAAA,EAAC;QAEtC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CACN,EAEA,CAAC5E,WAAW,IAAI,CAACF,UAAU,iBAC1BhB,OAAA;QAAKyF,SAAS,EAAC,+DAA+D;QAAAC,QAAA,eAC5E1F,OAAA;UAAGyF,SAAS,EAAC,yBAAyB;UAAAC,QAAA,EAAC;QAEvC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CACN,eAID9F,OAAA;QAAKyF,SAAS,EAAC,gCAAgC;QAAAC,QAAA,gBAC7C1F,OAAA;UACE0G,OAAO,EAAEtB,cAAe;UACxBK,SAAS,EAAE,yFACTjF,SAAS,GACL,wCAAwC,GACxC,4CAA4C,EAC/C;UACH8B,KAAK,EAAE9B,SAAS,GAAG,MAAM,GAAGI,SAAS,GAAG,YAAY,GAAG,iBAAkB;UAAA8E,QAAA,EAExElF,SAAS,GAAG,IAAI,GAAG;QAAI;UAAAmF,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClB,CAAC,EAERlF,SAAS,iBACRZ,OAAA;UACE0G,OAAO,EAAErB,kBAAmB;UAC5BI,SAAS,EAAC,+HAA+H;UACzInD,KAAK,EAAC,6BAA6B;UAAAoD,QAAA,EACpC;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CACT;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC,eAGN9F,OAAA;QAAKyF,SAAS,EAAC,MAAM;QAAAC,QAAA,gBACnB1F,OAAA;UAAKyF,SAAS,EAAC,0CAA0C;UAAAC,QAAA,eACvD1F,OAAA;YACEyF,SAAS,EAAC,2DAA2D;YACrEkB,KAAK,EAAE;cAAEC,KAAK,EAAE,GAAIlG,WAAW,GAAGW,eAAe,GAAI,GAAG;YAAI;UAAE;YAAAsE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC1D;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACJ,CAAC,eACN9F,OAAA;UAAGyF,SAAS,EAAC,wBAAwB;UAAAC,QAAA,GAClCH,UAAU,CAAC7E,WAAW,CAAC,EAAC,KAAG,EAAC6E,UAAU,CAAClE,eAAe,CAAC;QAAA;UAAAsE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvD,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eAGN9F,OAAA;QAAKyF,SAAS,EAAC,gEAAgE;QAAAC,QAAA,eAC7E1F,OAAA;UAAGyF,SAAS,EAAC,wBAAwB;UAAAC,QAAA,GAClC5E,UAAU,IAAII,WAAW,aAAXA,WAAW,eAAXA,WAAW,CAAE0B,UAAU,gBACpC5C,OAAA,CAAAE,SAAA;YAAAwF,QAAA,GAAE,eAAG,eAAA1F,OAAA;cAAA0F,QAAA,EAAQ;YAAc;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,qCAAiC;UAAA,eAAE,CAAC,gBAExE9F,OAAA,CAAAE,SAAA;YAAAwF,QAAA,GAAE,eAAG,eAAA1F,OAAA;cAAA0F,QAAA,EAAQ;YAAS;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,0CAAsC;UAAA,eAAE,CACxE,EACAlF,SAAS,iBAAIZ,OAAA;YAAMyF,SAAS,EAAC,YAAY;YAAAC,QAAA,EAAC;UAA0C;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3F;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAED,CAAC,EAELlF,SAAS,iBACRZ,OAAA;QAAGyF,SAAS,EAAC,6BAA6B;QAAAC,QAAA,EAAC;MAE3C;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CACJ;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eAGN9F,OAAA;MACE6G,GAAG,EAAE/E,QAAS;MACd6E,KAAK,EAAE;QAAEG,OAAO,EAAE;MAAO,CAAE;MAC3BC,OAAO,EAAE/B,WAAY;MACrBgC,WAAW,EAAC;IAAW;MAAArB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACvF,EAAA,CAtXIJ,WAAW;AAAA8G,EAAA,GAAX9G,WAAW;AAwXjB,eAAeA,WAAW;AAAC,IAAA8G,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}