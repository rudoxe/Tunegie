{"ast":null,"code":"import _objectSpread from\"C:/laragon/www/Tunegie/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";class iTunesApiService{constructor(){// Use PHP proxy to avoid CORS issues\nconst apiBase=process.env.NODE_ENV==='production'?'/backend/php/api':'http://localhost:8000/backend/php/api';this.baseUrl=\"\".concat(apiBase,\"/game/itunes_proxy.php\");this.testUrl=\"\".concat(apiBase,\"/game/itunes_test.php\");this.countryCode='US';}// Make API requests to iTunes via PHP proxy\nasync makeApiRequest(params){const url=new URL(this.baseUrl);// Add default parameters\nconst defaultParams={media:'music',entity:'song',country:this.countryCode,explicit:'Yes'};// Merge with provided parameters\nconst finalParams=_objectSpread(_objectSpread({},defaultParams),params);// Add parameters to URL\nObject.keys(finalParams).forEach(key=>{url.searchParams.append(key,finalParams[key]);});console.log(\"\\uD83C\\uDFB5 iTunes API request via PHP proxy: \".concat(url.toString()));try{const response=await fetch(url);if(!response.ok){throw new Error(\"iTunes API proxy error: \".concat(response.status));}const result=await response.json();// Check if proxy returned success\nif(!result.success){throw new Error(result.message||'API request failed');}// Extract the actual iTunes data\nconst data=result.data;console.log(\"\\uD83D\\uDCCA iTunes API returned \".concat(data.resultCount,\" results\"));return data;}catch(error){console.error('❌ iTunes API request failed:',error);throw error;}}// Search for tracks\nasync searchTracks(query){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:50;console.log(\"\\uD83D\\uDD0D Searching iTunes for: \\\"\".concat(query,\"\\\"\"));const data=await this.makeApiRequest({term:query,limit:limit});// Filter results to only include tracks with preview URLs\nconst tracksWithPreviews=data.results.filter(track=>track.previewUrl);console.log(\"\\u2705 Found \".concat(tracksWithPreviews.length,\" tracks with previews out of \").concat(data.results.length,\" total\"));return tracksWithPreviews.map(track=>this.formatTrack(track));}// Get tracks by specific artist\nasync getTracksByArtist(artistName){let count=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;console.log(\"\\uD83C\\uDFA4 Getting tracks for artist: \".concat(artistName));try{var _artistSearch$results,_tracksResponse$resul;// Step 1: Search for the artist to get their ID\nconst artistSearch=await this.makeApiRequest({term:artistName,media:'music',entity:'musicArtist',attribute:'artistTerm',limit:10});if(!((_artistSearch$results=artistSearch.results)!==null&&_artistSearch$results!==void 0&&_artistSearch$results.length)){console.warn(\"\\u274C No artist found for: \".concat(artistName));return[];}// Find the best artist match (more flexible matching)\nconst artist=artistSearch.results.find(a=>this.normalizeString(a.artistName).includes(this.normalizeString(artistName))||this.normalizeString(artistName).includes(this.normalizeString(a.artistName)));if(!artist){console.warn(\"\\u274C No matching artist found for: \".concat(artistName));return[];}console.log(\"\\u2705 Found artist: \".concat(artist.artistName,\" (ID: \").concat(artist.artistId,\")\"));// Step 2: Get all tracks by artist ID using lookup\nconst tracksResponse=await this.makeApiRequest({artistId:artist.artistId,entity:'song',lookup:'true',limit:200});if(!((_tracksResponse$resul=tracksResponse.results)!==null&&_tracksResponse$resul!==void 0&&_tracksResponse$resul.length)){console.warn(\"\\u274C No tracks found for artist ID: \".concat(artist.artistId));return[];}// Get all tracks with previews\nconst tracks=tracksResponse.results.filter(item=>item.wrapperType==='track'&&item.previewUrl&&item.kind==='song');console.log(\"\\uD83D\\uDCE6 Found \".concat(tracks.length,\" tracks with previews\"));if(tracks.length===0){var _directSearch$results;// Fallback: Try direct search if lookup returns no results\nconst directSearch=await this.makeApiRequest({term:\"\".concat(artistName,\" song\"),attribute:'artistTerm',entity:'song',limit:200});if((_directSearch$results=directSearch.results)!==null&&_directSearch$results!==void 0&&_directSearch$results.length){const matchingTracks=directSearch.results.filter(track=>track.previewUrl&&track.artistId===artist.artistId);tracks.push(...matchingTracks);}}// Sort by popularity (using collection ID as a rough indicator) and release date\nconst sortedTracks=tracks.sort((a,b)=>{// First by collection ID (newer albums usually have higher IDs)\nconst collectionDiff=(b.collectionId||0)-(a.collectionId||0);if(collectionDiff!==0)return collectionDiff;// Then by release date\nconst aDate=new Date(a.releaseDate||0);const bDate=new Date(b.releaseDate||0);return bDate-aDate;});// Get top tracks with some randomization\nconst selectedTracks=[...sortedTracks].sort(()=>Math.random()-0.5).slice(0,count);console.log(\"\\u2705 Returning \".concat(selectedTracks.length,\" tracks for \").concat(artistName,\":\"));selectedTracks.forEach(track=>{console.log(\"  - \\\"\".concat(track.trackName,\"\\\" from \\\"\").concat(track.collectionName,\"\\\"\"));});return selectedTracks.map(track=>this.formatTrack(track));}catch(error){console.error(\"\\u274C Error getting tracks for \".concat(artistName,\":\"),error);return[];}}// Get random popular tracks for general game mode\nasync getRandomTracksForGame(){let count=arguments.length>0&&arguments[0]!==undefined?arguments[0]:10;console.log(\"\\uD83C\\uDFB2 Getting \".concat(count,\" random popular tracks\"));try{// Search for popular terms to get current hits\nconst popularSearchTerms=['pop music 2024','top hits 2024','popular songs','hit music','trending songs','chart hits','radio hits','best songs 2024'];let allTracks=[];// Search each term and collect results\nfor(const term of popularSearchTerms){try{const tracks=await this.searchTracks(term,50);if(tracks&&tracks.length>0){allTracks.push(...tracks);console.log(\"\\u2705 Found \".concat(tracks.length,\" tracks for term: \").concat(term));}else{console.warn(\"\\u26A0\\uFE0F No tracks found for term: \".concat(term));}// Small delay to be respectful to the API\nawait new Promise(resolve=>setTimeout(resolve,150));}catch(error){console.warn(\"\\u274C Search failed for term: \".concat(term),error);}// If we have enough tracks, break early\nif(allTracks.length>=count*2){console.log(\"\\uD83C\\uDFAF Early break - have enough tracks (\".concat(allTracks.length,\")\"));break;}}// Remove duplicates based on track ID\nconst uniqueTracks=allTracks.filter((track,index,self)=>index===self.findIndex(t=>t.trackId===track.trackId));console.log(\"\\uD83C\\uDFB5 Found \".concat(uniqueTracks.length,\" unique tracks total\"));if(uniqueTracks.length<count){console.warn(\"\\u26A0\\uFE0F Only found \".concat(uniqueTracks.length,\" tracks, but need \").concat(count));}// Shuffle and return requested count\nconst shuffled=uniqueTracks.sort(()=>0.5-Math.random());const selectedTracks=shuffled.slice(0,count);console.log(\"\\u2705 Selected \".concat(selectedTracks.length,\" random tracks for game\"));return selectedTracks;}catch(error){console.error('❌ Error getting random tracks:',error);return[];}}// Get tracks by genre\nasync getTracksByGenre(genre){let count=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;console.log(\"\\uD83C\\uDFBC Getting tracks for genre: \".concat(genre));// Map genre names to search terms that work well with iTunes\nconst genreSearchTerms={'pop':['pop music','pop hits','top pop songs','popular pop'],'rock':['rock music','rock hits','classic rock','rock songs'],'hip-hop':['hip hop','rap music','hip hop hits','rap songs'],'r&b':['r&b music','soul music','rnb hits','rhythm and blues'],'electronic':['electronic music','edm','electronic dance','dance music'],'country':['country music','country hits','country songs','country pop'],'indie':['indie music','independent music','indie rock','indie pop'],'alternative':['alternative rock','alternative music','alt rock','alternative songs']};const searchTerms=genreSearchTerms[genre]||[genre,\"\".concat(genre,\" music\"),\"\".concat(genre,\" songs\"),\"\".concat(genre,\" hits\")];let allTracks=[];// Search each term for the genre\nfor(const term of searchTerms){try{const tracks=await this.searchTracks(term,40);if(tracks&&tracks.length>0){allTracks.push(...tracks);console.log(\"\\u2705 Found \".concat(tracks.length,\" tracks for genre term: \").concat(term));}else{console.warn(\"\\u26A0\\uFE0F No tracks found for genre term: \".concat(term));}// Small delay between requests\nawait new Promise(resolve=>setTimeout(resolve,150));}catch(error){console.warn(\"\\u274C Genre search failed for term: \".concat(term),error);}// If we have enough tracks, break early\nif(allTracks.length>=count*2){console.log(\"\\uD83C\\uDFAF Early break - have enough genre tracks (\".concat(allTracks.length,\")\"));break;}}// Remove duplicates\nconst uniqueTracks=allTracks.filter((track,index,self)=>index===self.findIndex(t=>t.trackId===track.trackId));console.log(\"\\uD83C\\uDFB5 Found \".concat(uniqueTracks.length,\" unique tracks for genre: \").concat(genre));if(uniqueTracks.length===0){console.warn(\"\\u274C No tracks found for genre: \".concat(genre));return[];}if(uniqueTracks.length<count){console.warn(\"\\u26A0\\uFE0F Only found \".concat(uniqueTracks.length,\" tracks for genre \").concat(genre,\", but need \").concat(count));}// Shuffle and return requested count\nconst shuffled=uniqueTracks.sort(()=>0.5-Math.random());return shuffled.slice(0,count);}// Format track data consistently\nformatTrack(track){return{id:\"itunes-\".concat(track.trackId),title:track.trackName,artists:[{name:track.artistName}],album:{title:track.collectionName||'Unknown Album',releaseDate:track.releaseDate},duration:Math.floor(track.trackTimeMillis/1000)||30,previewUrl:track.previewUrl,actualTrack:\"\".concat(track.trackName,\" by \").concat(track.artistName),source:'iTunes',canPreview:true,artworkUrl:track.artworkUrl100,// Raw iTunes data for debugging\n_raw:{trackId:track.trackId,genre:track.primaryGenreName,price:track.trackPrice,currency:track.currency}};}// Helper function to normalize strings for comparison\nnormalizeString(str){if(!str)return'';return str.toLowerCase().replace(/[^\\w\\s]/g,'')// Remove punctuation\n.replace(/\\s+/g,' ')// Normalize whitespace\n.trim();}// Check if two artist names match (handles variations)\nartistNamesMatch(name1,name2){// Remove common prefixes like \"The\"\nconst cleanName1=name1.replace(/^the\\s+/,'');const cleanName2=name2.replace(/^the\\s+/,'');return cleanName1===cleanName2||cleanName1.includes(cleanName2)||cleanName2.includes(cleanName1);}// Test API connection\nasync testConnection(){try{console.log('🧪 Testing iTunes API connection via PHP proxy...');const response=await fetch(this.testUrl);if(!response.ok){throw new Error(\"Test endpoint error: \".concat(response.status));}const result=await response.json();const isConnected=result.success&&result.connected;if(isConnected){console.log('✅ iTunes API connection successful via PHP proxy');}else{console.log('❌ iTunes API connection failed:',result.message);}return isConnected;}catch(error){console.error('❌ iTunes API connection test failed:',error);return false;}}// Get track preview info (simplified since iTunes tracks already have previews)\nasync getTrackPreviewInfo(track){// iTunes tracks already come with preview URLs\nif(track.previewUrl){return{id:track.id,title:track.title,artist:track.artists[0].name,album:track.album.title,duration:track.duration,previewUrl:track.previewUrl,actualTrack:track.actualTrack,source:'iTunes',albumArt:track.artworkUrl,canPreview:true};}return{id:track.id,title:track.title,artist:track.artists[0].name,album:track.album.title,duration:track.duration,canPreview:false,actualTrack:\"\".concat(track.title,\" by \").concat(track.artists[0].name,\" (No Preview)\"),source:'None'};}}// Create and export singleton instance\nconst itunesApiService=new iTunesApiService();export default itunesApiService;","map":{"version":3,"names":["iTunesApiService","constructor","apiBase","process","env","NODE_ENV","baseUrl","concat","testUrl","countryCode","makeApiRequest","params","url","URL","defaultParams","media","entity","country","explicit","finalParams","_objectSpread","Object","keys","forEach","key","searchParams","append","console","log","toString","response","fetch","ok","Error","status","result","json","success","message","data","resultCount","error","searchTracks","query","limit","arguments","length","undefined","term","tracksWithPreviews","results","filter","track","previewUrl","map","formatTrack","getTracksByArtist","artistName","count","_artistSearch$results","_tracksResponse$resul","artistSearch","attribute","warn","artist","find","a","normalizeString","includes","artistId","tracksResponse","lookup","tracks","item","wrapperType","kind","_directSearch$results","directSearch","matchingTracks","push","sortedTracks","sort","b","collectionDiff","collectionId","aDate","Date","releaseDate","bDate","selectedTracks","Math","random","slice","trackName","collectionName","getRandomTracksForGame","popularSearchTerms","allTracks","Promise","resolve","setTimeout","uniqueTracks","index","self","findIndex","t","trackId","shuffled","getTracksByGenre","genre","genreSearchTerms","searchTerms","id","title","artists","name","album","duration","floor","trackTimeMillis","actualTrack","source","canPreview","artworkUrl","artworkUrl100","_raw","primaryGenreName","price","trackPrice","currency","str","toLowerCase","replace","trim","artistNamesMatch","name1","name2","cleanName1","cleanName2","testConnection","isConnected","connected","getTrackPreviewInfo","albumArt","itunesApiService"],"sources":["C:/laragon/www/Tunegie/frontend/src/services/itunesApi.js"],"sourcesContent":["class iTunesApiService {\r\n  constructor() {\r\n    // Use PHP proxy to avoid CORS issues\r\n    const apiBase = process.env.NODE_ENV === 'production' ? '/backend/php/api' : 'http://localhost:8000/backend/php/api';\r\n    this.baseUrl = `${apiBase}/game/itunes_proxy.php`;\r\n    this.testUrl = `${apiBase}/game/itunes_test.php`;\r\n    this.countryCode = 'US';\r\n  }\r\n\r\n  // Make API requests to iTunes via PHP proxy\r\n  async makeApiRequest(params) {\r\n    const url = new URL(this.baseUrl);\r\n    \r\n    // Add default parameters\r\n    const defaultParams = {\r\n      media: 'music',\r\n      entity: 'song',\r\n      country: this.countryCode,\r\n      explicit: 'Yes'\r\n    };\r\n    \r\n    // Merge with provided parameters\r\n    const finalParams = { ...defaultParams, ...params };\r\n    \r\n    // Add parameters to URL\r\n    Object.keys(finalParams).forEach(key => {\r\n      url.searchParams.append(key, finalParams[key]);\r\n    });\r\n\r\n    console.log(`🎵 iTunes API request via PHP proxy: ${url.toString()}`);\r\n\r\n    try {\r\n      const response = await fetch(url);\r\n      if (!response.ok) {\r\n        throw new Error(`iTunes API proxy error: ${response.status}`);\r\n      }\r\n      \r\n      const result = await response.json();\r\n      \r\n      // Check if proxy returned success\r\n      if (!result.success) {\r\n        throw new Error(result.message || 'API request failed');\r\n      }\r\n      \r\n      // Extract the actual iTunes data\r\n      const data = result.data;\r\n      console.log(`📊 iTunes API returned ${data.resultCount} results`);\r\n      \r\n      return data;\r\n    } catch (error) {\r\n      console.error('❌ iTunes API request failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Search for tracks\r\n  async searchTracks(query, limit = 50) {\r\n    console.log(`🔍 Searching iTunes for: \"${query}\"`);\r\n    \r\n    const data = await this.makeApiRequest({\r\n      term: query,\r\n      limit: limit\r\n    });\r\n\r\n    // Filter results to only include tracks with preview URLs\r\n    const tracksWithPreviews = data.results.filter(track => track.previewUrl);\r\n    \r\n    console.log(`✅ Found ${tracksWithPreviews.length} tracks with previews out of ${data.results.length} total`);\r\n    \r\n    return tracksWithPreviews.map(track => this.formatTrack(track));\r\n  }\r\n\r\n  // Get tracks by specific artist\r\n  async getTracksByArtist(artistName, count = 10) {\r\n    console.log(`🎤 Getting tracks for artist: ${artistName}`);\r\n    \r\n    try {\r\n      // Step 1: Search for the artist to get their ID\r\n      const artistSearch = await this.makeApiRequest({\r\n        term: artistName,\r\n        media: 'music',\r\n        entity: 'musicArtist',\r\n        attribute: 'artistTerm',\r\n        limit: 10\r\n      });\r\n\r\n      if (!artistSearch.results?.length) {\r\n        console.warn(`❌ No artist found for: ${artistName}`);\r\n        return [];\r\n      }\r\n\r\n      // Find the best artist match (more flexible matching)\r\n      const artist = artistSearch.results.find(a => \r\n        this.normalizeString(a.artistName).includes(this.normalizeString(artistName)) ||\r\n        this.normalizeString(artistName).includes(this.normalizeString(a.artistName))\r\n      );\r\n\r\n      if (!artist) {\r\n        console.warn(`❌ No matching artist found for: ${artistName}`);\r\n        return [];\r\n      }\r\n\r\n      console.log(`✅ Found artist: ${artist.artistName} (ID: ${artist.artistId})`);\r\n\r\n      // Step 2: Get all tracks by artist ID using lookup\r\n      const tracksResponse = await this.makeApiRequest({\r\n        artistId: artist.artistId,\r\n        entity: 'song',\r\n        lookup: 'true',\r\n        limit: 200\r\n      });\r\n\r\n      if (!tracksResponse.results?.length) {\r\n        console.warn(`❌ No tracks found for artist ID: ${artist.artistId}`);\r\n        return [];\r\n      }\r\n\r\n      // Get all tracks with previews\r\n      const tracks = tracksResponse.results.filter(item => \r\n        item.wrapperType === 'track' && \r\n        item.previewUrl &&\r\n        item.kind === 'song'\r\n      );\r\n\r\n      console.log(`📦 Found ${tracks.length} tracks with previews`);\r\n\r\n      if (tracks.length === 0) {\r\n        // Fallback: Try direct search if lookup returns no results\r\n        const directSearch = await this.makeApiRequest({\r\n          term: `${artistName} song`,\r\n          attribute: 'artistTerm',\r\n          entity: 'song',\r\n          limit: 200\r\n        });\r\n\r\n        if (directSearch.results?.length) {\r\n          const matchingTracks = directSearch.results.filter(track => \r\n            track.previewUrl &&\r\n            track.artistId === artist.artistId\r\n          );\r\n          tracks.push(...matchingTracks);\r\n        }\r\n      }\r\n\r\n      // Sort by popularity (using collection ID as a rough indicator) and release date\r\n      const sortedTracks = tracks.sort((a, b) => {\r\n        // First by collection ID (newer albums usually have higher IDs)\r\n        const collectionDiff = (b.collectionId || 0) - (a.collectionId || 0);\r\n        if (collectionDiff !== 0) return collectionDiff;\r\n        \r\n        // Then by release date\r\n        const aDate = new Date(a.releaseDate || 0);\r\n        const bDate = new Date(b.releaseDate || 0);\r\n        return bDate - aDate;\r\n      });\r\n\r\n      // Get top tracks with some randomization\r\n      const selectedTracks = [...sortedTracks]\r\n        .sort(() => Math.random() - 0.5)\r\n        .slice(0, count);\r\n\r\n      console.log(`✅ Returning ${selectedTracks.length} tracks for ${artistName}:`);\r\n      selectedTracks.forEach(track => {\r\n        console.log(`  - \"${track.trackName}\" from \"${track.collectionName}\"`);\r\n      });\r\n      \r\n      return selectedTracks.map(track => this.formatTrack(track));\r\n      \r\n    } catch (error) {\r\n      console.error(`❌ Error getting tracks for ${artistName}:`, error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Get random popular tracks for general game mode\r\n  async getRandomTracksForGame(count = 10) {\r\n    console.log(`🎲 Getting ${count} random popular tracks`);\r\n    \r\n    try {\r\n      // Search for popular terms to get current hits\r\n      const popularSearchTerms = [\r\n        'pop music 2024',\r\n        'top hits 2024',\r\n        'popular songs',\r\n        'hit music',\r\n        'trending songs',\r\n        'chart hits',\r\n        'radio hits',\r\n        'best songs 2024'\r\n      ];\r\n\r\n      let allTracks = [];\r\n\r\n      // Search each term and collect results\r\n      for (const term of popularSearchTerms) {\r\n        try {\r\n          const tracks = await this.searchTracks(term, 50);\r\n          if (tracks && tracks.length > 0) {\r\n            allTracks.push(...tracks);\r\n            console.log(`✅ Found ${tracks.length} tracks for term: ${term}`);\r\n          } else {\r\n            console.warn(`⚠️ No tracks found for term: ${term}`);\r\n          }\r\n          \r\n          // Small delay to be respectful to the API\r\n          await new Promise(resolve => setTimeout(resolve, 150));\r\n        } catch (error) {\r\n          console.warn(`❌ Search failed for term: ${term}`, error);\r\n        }\r\n        \r\n        // If we have enough tracks, break early\r\n        if (allTracks.length >= count * 2) {\r\n          console.log(`🎯 Early break - have enough tracks (${allTracks.length})`);\r\n          break;\r\n        }\r\n      }\r\n\r\n      // Remove duplicates based on track ID\r\n      const uniqueTracks = allTracks.filter((track, index, self) =>\r\n        index === self.findIndex(t => t.trackId === track.trackId)\r\n      );\r\n\r\n      console.log(`🎵 Found ${uniqueTracks.length} unique tracks total`);\r\n\r\n      if (uniqueTracks.length < count) {\r\n        console.warn(`⚠️ Only found ${uniqueTracks.length} tracks, but need ${count}`);\r\n      }\r\n\r\n      // Shuffle and return requested count\r\n      const shuffled = uniqueTracks.sort(() => 0.5 - Math.random());\r\n      const selectedTracks = shuffled.slice(0, count);\r\n\r\n      console.log(`✅ Selected ${selectedTracks.length} random tracks for game`);\r\n      return selectedTracks;\r\n\r\n    } catch (error) {\r\n      console.error('❌ Error getting random tracks:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Get tracks by genre\r\n  async getTracksByGenre(genre, count = 10) {\r\n    console.log(`🎼 Getting tracks for genre: ${genre}`);\r\n    \r\n    // Map genre names to search terms that work well with iTunes\r\n    const genreSearchTerms = {\r\n      'pop': ['pop music', 'pop hits', 'top pop songs', 'popular pop'],\r\n      'rock': ['rock music', 'rock hits', 'classic rock', 'rock songs'],\r\n      'hip-hop': ['hip hop', 'rap music', 'hip hop hits', 'rap songs'],\r\n      'r&b': ['r&b music', 'soul music', 'rnb hits', 'rhythm and blues'],\r\n      'electronic': ['electronic music', 'edm', 'electronic dance', 'dance music'],\r\n      'country': ['country music', 'country hits', 'country songs', 'country pop'],\r\n      'indie': ['indie music', 'independent music', 'indie rock', 'indie pop'],\r\n      'alternative': ['alternative rock', 'alternative music', 'alt rock', 'alternative songs']\r\n    };\r\n\r\n    const searchTerms = genreSearchTerms[genre] || [genre, `${genre} music`, `${genre} songs`, `${genre} hits`];\r\n    let allTracks = [];\r\n\r\n    // Search each term for the genre\r\n    for (const term of searchTerms) {\r\n      try {\r\n        const tracks = await this.searchTracks(term, 40);\r\n        if (tracks && tracks.length > 0) {\r\n          allTracks.push(...tracks);\r\n          console.log(`✅ Found ${tracks.length} tracks for genre term: ${term}`);\r\n        } else {\r\n          console.warn(`⚠️ No tracks found for genre term: ${term}`);\r\n        }\r\n        \r\n        // Small delay between requests\r\n        await new Promise(resolve => setTimeout(resolve, 150));\r\n      } catch (error) {\r\n        console.warn(`❌ Genre search failed for term: ${term}`, error);\r\n      }\r\n      \r\n      // If we have enough tracks, break early\r\n      if (allTracks.length >= count * 2) {\r\n        console.log(`🎯 Early break - have enough genre tracks (${allTracks.length})`);\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Remove duplicates\r\n    const uniqueTracks = allTracks.filter((track, index, self) =>\r\n      index === self.findIndex(t => t.trackId === track.trackId)\r\n    );\r\n\r\n    console.log(`🎵 Found ${uniqueTracks.length} unique tracks for genre: ${genre}`);\r\n\r\n    if (uniqueTracks.length === 0) {\r\n      console.warn(`❌ No tracks found for genre: ${genre}`);\r\n      return [];\r\n    }\r\n\r\n    if (uniqueTracks.length < count) {\r\n      console.warn(`⚠️ Only found ${uniqueTracks.length} tracks for genre ${genre}, but need ${count}`);\r\n    }\r\n\r\n    // Shuffle and return requested count\r\n    const shuffled = uniqueTracks.sort(() => 0.5 - Math.random());\r\n    return shuffled.slice(0, count);\r\n  }\r\n\r\n  // Format track data consistently\r\n  formatTrack(track) {\r\n    return {\r\n      id: `itunes-${track.trackId}`,\r\n      title: track.trackName,\r\n      artists: [{ name: track.artistName }],\r\n      album: {\r\n        title: track.collectionName || 'Unknown Album',\r\n        releaseDate: track.releaseDate\r\n      },\r\n      duration: Math.floor(track.trackTimeMillis / 1000) || 30,\r\n      previewUrl: track.previewUrl,\r\n      actualTrack: `${track.trackName} by ${track.artistName}`,\r\n      source: 'iTunes',\r\n      canPreview: true,\r\n      artworkUrl: track.artworkUrl100,\r\n      // Raw iTunes data for debugging\r\n      _raw: {\r\n        trackId: track.trackId,\r\n        genre: track.primaryGenreName,\r\n        price: track.trackPrice,\r\n        currency: track.currency\r\n      }\r\n    };\r\n  }\r\n\r\n  // Helper function to normalize strings for comparison\r\n  normalizeString(str) {\r\n    if (!str) return '';\r\n    return str.toLowerCase()\r\n      .replace(/[^\\w\\s]/g, '') // Remove punctuation\r\n      .replace(/\\s+/g, ' ') // Normalize whitespace\r\n      .trim();\r\n  }\r\n\r\n  // Check if two artist names match (handles variations)\r\n  artistNamesMatch(name1, name2) {\r\n    // Remove common prefixes like \"The\"\r\n    const cleanName1 = name1.replace(/^the\\s+/, '');\r\n    const cleanName2 = name2.replace(/^the\\s+/, '');\r\n    \r\n    return cleanName1 === cleanName2 ||\r\n           cleanName1.includes(cleanName2) ||\r\n           cleanName2.includes(cleanName1);\r\n  }\r\n\r\n  // Test API connection\r\n  async testConnection() {\r\n    try {\r\n      console.log('🧪 Testing iTunes API connection via PHP proxy...');\r\n      \r\n      const response = await fetch(this.testUrl);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Test endpoint error: ${response.status}`);\r\n      }\r\n      \r\n      const result = await response.json();\r\n      const isConnected = result.success && result.connected;\r\n      \r\n      if (isConnected) {\r\n        console.log('✅ iTunes API connection successful via PHP proxy');\r\n      } else {\r\n        console.log('❌ iTunes API connection failed:', result.message);\r\n      }\r\n      \r\n      return isConnected;\r\n    } catch (error) {\r\n      console.error('❌ iTunes API connection test failed:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Get track preview info (simplified since iTunes tracks already have previews)\r\n  async getTrackPreviewInfo(track) {\r\n    // iTunes tracks already come with preview URLs\r\n    if (track.previewUrl) {\r\n      return {\r\n        id: track.id,\r\n        title: track.title,\r\n        artist: track.artists[0].name,\r\n        album: track.album.title,\r\n        duration: track.duration,\r\n        previewUrl: track.previewUrl,\r\n        actualTrack: track.actualTrack,\r\n        source: 'iTunes',\r\n        albumArt: track.artworkUrl,\r\n        canPreview: true\r\n      };\r\n    }\r\n\r\n    return {\r\n      id: track.id,\r\n      title: track.title,\r\n      artist: track.artists[0].name,\r\n      album: track.album.title,\r\n      duration: track.duration,\r\n      canPreview: false,\r\n      actualTrack: `${track.title} by ${track.artists[0].name} (No Preview)`,\r\n      source: 'None'\r\n    };\r\n  }\r\n}\r\n\r\n// Create and export singleton instance\r\nconst itunesApiService = new iTunesApiService();\r\nexport default itunesApiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}