{"ast":null,"code":"// Helper function to calculate string similarity (Levenshtein distance based)\nexport const calculateSimilarity = (str1, str2) => {\n  const len1 = str1.length;\n  const len2 = str2.length;\n  if (len1 === 0) return len2 === 0 ? 1 : 0;\n  if (len2 === 0) return 0;\n  const matrix = [];\n  for (let i = 0; i <= len2; i++) {\n    matrix[i] = [i];\n  }\n  for (let j = 0; j <= len1; j++) {\n    matrix[0][j] = j;\n  }\n  for (let i = 1; i <= len2; i++) {\n    for (let j = 1; j <= len1; j++) {\n      if (str2.charAt(i - 1) === str1.charAt(j - 1)) {\n        matrix[i][j] = matrix[i - 1][j - 1];\n      } else {\n        matrix[i][j] = Math.min(matrix[i - 1][j - 1] + 1, matrix[i][j - 1] + 1, matrix[i - 1][j] + 1);\n      }\n    }\n  }\n  const maxLen = Math.max(len1, len2);\n  return (maxLen - matrix[len2][len1]) / maxLen;\n};\n\n// Helper function to calculate overlap percentage\nexport const calculateOverlap = (guess, target) => {\n  const guessWords = guess.split(' ');\n  let matchedChars = 0;\n  let totalGuessChars = guess.replace(/\\s/g, '').length;\n  for (const guessWord of guessWords) {\n    if (guessWord.length >= 2) {\n      // Only count meaningful words\n      if (target.includes(guessWord)) {\n        matchedChars += guessWord.length;\n      }\n    }\n  }\n  return totalGuessChars > 0 ? matchedChars / totalGuessChars : 0;\n};\n\n// Function to validate and score a guess\nexport const validateGuess = (userGuess, currentTrack) => {\n  if (!userGuess.trim()) return {\n    correct: false,\n    matchType: 'empty'\n  };\n  const correctAnswer = `${currentTrack.title} - ${currentTrack.artists[0].name}`;\n  const guessLower = userGuess.toLowerCase().trim();\n  const titleLower = currentTrack.title.toLowerCase();\n  const artistLower = currentTrack.artists[0].name.toLowerCase();\n\n  // Declare variables at function level\n  let correct = false;\n  let matchType = '';\n\n  // Require minimum length to prevent single letter matches\n  if (guessLower.length < 3) {\n    correct = false;\n    matchType = 'too short';\n    console.log(`❌ Guess too short: \"${userGuess}\" (minimum 3 characters)`);\n  } else {\n    // More strict matching logic - clean strings for better comparison\n    const cleanGuess = guessLower.replace(/[^a-z0-9\\s]/g, '').replace(/\\s+/g, ' ').trim();\n    const cleanTitle = titleLower.replace(/[^a-z0-9\\s]/g, '').replace(/\\s+/g, ' ').trim();\n    const cleanArtist = artistLower.replace(/[^a-z0-9\\s]/g, '').replace(/\\s+/g, ' ').trim();\n\n    // Check for substantial matches (not just single letters)\n\n    // 1. Exact matches (highest priority)\n    if (cleanGuess === cleanTitle || cleanGuess === cleanArtist) {\n      correct = true;\n      matchType = 'exact';\n    }\n    // 2. Very close matches (80%+ similarity for longer strings)\n    else if (cleanGuess.length >= 5) {\n      const titleSimilarity = calculateSimilarity(cleanGuess, cleanTitle);\n      const artistSimilarity = calculateSimilarity(cleanGuess, cleanArtist);\n      if (titleSimilarity >= 0.8 || artistSimilarity >= 0.8) {\n        correct = true;\n        matchType = 'very close';\n      }\n      // 3. Contains significant portion (50%+ of the guess must match)\n      else {\n        const titleOverlap = calculateOverlap(cleanGuess, cleanTitle);\n        const artistOverlap = calculateOverlap(cleanGuess, cleanArtist);\n        if (titleOverlap >= 0.5 || artistOverlap >= 0.5) {\n          correct = true;\n          matchType = 'partial';\n        }\n      }\n    }\n    // 4. For shorter guesses (3-4 chars), require exact substring match\n    else {\n      if (cleanTitle.includes(cleanGuess) || cleanArtist.includes(cleanGuess)) {\n        // Additional check: the guess should be a meaningful part (not just common words)\n        const commonWords = ['the', 'and', 'you', 'are', 'for', 'all', 'not', 'but', 'can', 'had', 'was'];\n        if (!commonWords.includes(cleanGuess)) {\n          correct = true;\n          matchType = 'substring';\n        }\n      }\n    }\n  }\n\n  // Log result\n  console.log(`🎯 Guess: \"${userGuess}\" | Title: \"${currentTrack.title}\" | Artist: \"${currentTrack.artists[0].name}\" | Match: ${correct ? `✅ ${matchType}` : `❌ ${matchType || 'no match'}`}`);\n  return {\n    correct,\n    matchType,\n    correctAnswer\n  };\n};\n\n// Function to determine if an album is a single release\nexport const isSingleRelease = (albumTitle, trackTitle) => {\n  if (!albumTitle) return false;\n  return albumTitle.toLowerCase().includes('single') || albumTitle.toLowerCase() === trackTitle.toLowerCase() || albumTitle.toLowerCase().includes(' - single') || albumTitle.toLowerCase().includes('(single)') || albumTitle.toLowerCase().includes('- ep') || albumTitle.toLowerCase().includes('(ep)') || albumTitle.toLowerCase().includes(trackTitle.toLowerCase()) || trackTitle.toLowerCase().includes(albumTitle.toLowerCase()) || albumTitle.toLowerCase().includes('remix') || albumTitle.toLowerCase().includes('feat.') || albumTitle.toLowerCase().includes('featuring') || albumTitle.split(' ').length <= 3;\n};","map":{"version":3,"names":["calculateSimilarity","str1","str2","len1","length","len2","matrix","i","j","charAt","Math","min","maxLen","max","calculateOverlap","guess","target","guessWords","split","matchedChars","totalGuessChars","replace","guessWord","includes","validateGuess","userGuess","currentTrack","trim","correct","matchType","correctAnswer","title","artists","name","guessLower","toLowerCase","titleLower","artistLower","console","log","cleanGuess","cleanTitle","cleanArtist","titleSimilarity","artistSimilarity","titleOverlap","artistOverlap","commonWords","isSingleRelease","albumTitle","trackTitle"],"sources":["C:/laragon/www/Tunegie/frontend/src/utils/gameUtils.js"],"sourcesContent":["// Helper function to calculate string similarity (Levenshtein distance based)\r\nexport const calculateSimilarity = (str1, str2) => {\r\n  const len1 = str1.length;\r\n  const len2 = str2.length;\r\n  \r\n  if (len1 === 0) return len2 === 0 ? 1 : 0;\r\n  if (len2 === 0) return 0;\r\n  \r\n  const matrix = [];\r\n  for (let i = 0; i <= len2; i++) {\r\n    matrix[i] = [i];\r\n  }\r\n  for (let j = 0; j <= len1; j++) {\r\n    matrix[0][j] = j;\r\n  }\r\n  \r\n  for (let i = 1; i <= len2; i++) {\r\n    for (let j = 1; j <= len1; j++) {\r\n      if (str2.charAt(i - 1) === str1.charAt(j - 1)) {\r\n        matrix[i][j] = matrix[i - 1][j - 1];\r\n      } else {\r\n        matrix[i][j] = Math.min(\r\n          matrix[i - 1][j - 1] + 1,\r\n          matrix[i][j - 1] + 1,\r\n          matrix[i - 1][j] + 1\r\n        );\r\n      }\r\n    }\r\n  }\r\n  \r\n  const maxLen = Math.max(len1, len2);\r\n  return (maxLen - matrix[len2][len1]) / maxLen;\r\n};\r\n\r\n// Helper function to calculate overlap percentage\r\nexport const calculateOverlap = (guess, target) => {\r\n  const guessWords = guess.split(' ');\r\n  \r\n  let matchedChars = 0;\r\n  let totalGuessChars = guess.replace(/\\s/g, '').length;\r\n  \r\n  for (const guessWord of guessWords) {\r\n    if (guessWord.length >= 2) { // Only count meaningful words\r\n      if (target.includes(guessWord)) {\r\n        matchedChars += guessWord.length;\r\n      }\r\n    }\r\n  }\r\n  \r\n  return totalGuessChars > 0 ? matchedChars / totalGuessChars : 0;\r\n};\r\n\r\n// Function to validate and score a guess\r\nexport const validateGuess = (userGuess, currentTrack) => {\r\n  if (!userGuess.trim()) return { correct: false, matchType: 'empty' };\r\n\r\n  const correctAnswer = `${currentTrack.title} - ${currentTrack.artists[0].name}`;\r\n  const guessLower = userGuess.toLowerCase().trim();\r\n  const titleLower = currentTrack.title.toLowerCase();\r\n  const artistLower = currentTrack.artists[0].name.toLowerCase();\r\n\r\n  // Declare variables at function level\r\n  let correct = false;\r\n  let matchType = '';\r\n\r\n  // Require minimum length to prevent single letter matches\r\n  if (guessLower.length < 3) {\r\n    correct = false;\r\n    matchType = 'too short';\r\n    console.log(`❌ Guess too short: \"${userGuess}\" (minimum 3 characters)`);\r\n  } else {\r\n    // More strict matching logic - clean strings for better comparison\r\n    const cleanGuess = guessLower.replace(/[^a-z0-9\\s]/g, '').replace(/\\s+/g, ' ').trim();\r\n    const cleanTitle = titleLower.replace(/[^a-z0-9\\s]/g, '').replace(/\\s+/g, ' ').trim();\r\n    const cleanArtist = artistLower.replace(/[^a-z0-9\\s]/g, '').replace(/\\s+/g, ' ').trim();\r\n    \r\n    // Check for substantial matches (not just single letters)\r\n    \r\n    // 1. Exact matches (highest priority)\r\n    if (cleanGuess === cleanTitle || cleanGuess === cleanArtist) {\r\n      correct = true;\r\n      matchType = 'exact';\r\n    }\r\n    // 2. Very close matches (80%+ similarity for longer strings)\r\n    else if (cleanGuess.length >= 5) {\r\n      const titleSimilarity = calculateSimilarity(cleanGuess, cleanTitle);\r\n      const artistSimilarity = calculateSimilarity(cleanGuess, cleanArtist);\r\n      \r\n      if (titleSimilarity >= 0.8 || artistSimilarity >= 0.8) {\r\n        correct = true;\r\n        matchType = 'very close';\r\n      }\r\n      // 3. Contains significant portion (50%+ of the guess must match)\r\n      else {\r\n        const titleOverlap = calculateOverlap(cleanGuess, cleanTitle);\r\n        const artistOverlap = calculateOverlap(cleanGuess, cleanArtist);\r\n        \r\n        if (titleOverlap >= 0.5 || artistOverlap >= 0.5) {\r\n          correct = true;\r\n          matchType = 'partial';\r\n        }\r\n      }\r\n    }\r\n    // 4. For shorter guesses (3-4 chars), require exact substring match\r\n    else {\r\n      if (cleanTitle.includes(cleanGuess) || cleanArtist.includes(cleanGuess)) {\r\n        // Additional check: the guess should be a meaningful part (not just common words)\r\n        const commonWords = ['the', 'and', 'you', 'are', 'for', 'all', 'not', 'but', 'can', 'had', 'was'];\r\n        if (!commonWords.includes(cleanGuess)) {\r\n          correct = true;\r\n          matchType = 'substring';\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Log result\r\n  console.log(`🎯 Guess: \"${userGuess}\" | Title: \"${currentTrack.title}\" | Artist: \"${currentTrack.artists[0].name}\" | Match: ${correct ? `✅ ${matchType}` : `❌ ${matchType || 'no match'}`}`);\r\n  \r\n  return {\r\n    correct,\r\n    matchType,\r\n    correctAnswer\r\n  };\r\n};\r\n\r\n// Function to determine if an album is a single release\r\nexport const isSingleRelease = (albumTitle, trackTitle) => {\r\n  if (!albumTitle) return false;\r\n  \r\n  return albumTitle.toLowerCase().includes('single') ||\r\n    albumTitle.toLowerCase() === trackTitle.toLowerCase() ||\r\n    albumTitle.toLowerCase().includes(' - single') ||\r\n    albumTitle.toLowerCase().includes('(single)') ||\r\n    albumTitle.toLowerCase().includes('- ep') ||\r\n    albumTitle.toLowerCase().includes('(ep)') ||\r\n    albumTitle.toLowerCase().includes(trackTitle.toLowerCase()) ||\r\n    trackTitle.toLowerCase().includes(albumTitle.toLowerCase()) ||\r\n    albumTitle.toLowerCase().includes('remix') ||\r\n    albumTitle.toLowerCase().includes('feat.') ||\r\n    albumTitle.toLowerCase().includes('featuring') ||\r\n    albumTitle.split(' ').length <= 3;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}