{"ast":null,"code":"import _objectSpread from\"C:/laragon/www/Tunegie/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useState}from'react';import{useAuth}from'./AuthContext';import{jsx as _jsx}from\"react/jsx-runtime\";const GameContext=/*#__PURE__*/createContext();export const useGame=()=>{const context=useContext(GameContext);if(!context){throw new Error('useGame must be used within a GameProvider');}return context;};export const GameProvider=_ref=>{let{children}=_ref;const{isAuthenticated,API_BASE}=useAuth();const[currentGame,setCurrentGame]=useState(null);const[gameHistory,setGameHistory]=useState([]);// Keep a ref to the current game for immediate access\nconst currentGameRef={current:null};// Start a new game session\nconst startGame=function(){let gameMode=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'standard';const newGame={id:Date.now(),gameMode,startTime:new Date(),rounds:[],currentRound:0,score:0,correctAnswers:0,status:'active'};currentGameRef.current=newGame;setCurrentGame(newGame);console.log('Started game and set ref:',newGame.id);return newGame;};// Add a round result to the current game\nconst addRound=roundData=>{var _roundData$track,_roundData$track2,_roundData$track3,_roundData$track3$art,_roundData$track3$art2,_roundData$track4,_roundData$track4$alb;const gameToUpdate=currentGameRef.current||currentGame;console.log('addRound called with game:',gameToUpdate?{id:gameToUpdate.id,rounds:gameToUpdate.rounds.length,score:gameToUpdate.score}:null);if(!gameToUpdate){console.error('No active game session');return null;}const round={roundNumber:gameToUpdate.rounds.length+1,track_id:((_roundData$track=roundData.track)===null||_roundData$track===void 0?void 0:_roundData$track.id)||'',track_title:((_roundData$track2=roundData.track)===null||_roundData$track2===void 0?void 0:_roundData$track2.title)||'',track_artist:((_roundData$track3=roundData.track)===null||_roundData$track3===void 0?void 0:(_roundData$track3$art=_roundData$track3.artists)===null||_roundData$track3$art===void 0?void 0:(_roundData$track3$art2=_roundData$track3$art[0])===null||_roundData$track3$art2===void 0?void 0:_roundData$track3$art2.name)||'',album_title:((_roundData$track4=roundData.track)===null||_roundData$track4===void 0?void 0:(_roundData$track4$alb=_roundData$track4.album)===null||_roundData$track4$alb===void 0?void 0:_roundData$track4$alb.title)||'',user_guess:roundData.userGuess||'',correct_answer:roundData.correctAnswer||'',is_correct:roundData.isCorrect||false,time_taken:roundData.timeTaken||0,points_earned:roundData.pointsEarned||0,timestamp:new Date()};const updatedGame=_objectSpread(_objectSpread({},gameToUpdate),{},{rounds:[...gameToUpdate.rounds,round],currentRound:gameToUpdate.currentRound+1,score:gameToUpdate.score+(round.points_earned||0),correctAnswers:gameToUpdate.correctAnswers+(round.is_correct?1:0)});// Update both ref and state\ncurrentGameRef.current=updatedGame;setCurrentGame(updatedGame);console.log('Updated game state:',{id:updatedGame.id,rounds:updatedGame.rounds.length,score:updatedGame.score,correctAnswers:updatedGame.correctAnswers});return updatedGame;};// End the current game and save score\nconst endGame=async()=>{const gameToEnd=currentGameRef.current||currentGame;if(!gameToEnd){console.error('No active game session to end');return null;}console.log('Ending game with current state:',{id:gameToEnd.id,rounds:gameToEnd.rounds.length,score:gameToEnd.score,correctAnswers:gameToEnd.correctAnswers});const finalGame=_objectSpread(_objectSpread({},gameToEnd),{},{status:'completed',endTime:new Date(),totalRounds:gameToEnd.rounds.length});// Save score if user is authenticated (before clearing currentGame)\nlet result=null;if(isAuthenticated()){try{result=await saveScore(finalGame);}catch(error){console.error('Failed to save score:',error);result={saveError:error.message};}}// Clear current game and update history after saving\ncurrentGameRef.current=null;setCurrentGame(null);setGameHistory(prev=>[finalGame,...prev.slice(0,9)]);// Keep last 10 games\nreturn result?_objectSpread(_objectSpread({},finalGame),{},{serverResult:result}):finalGame;};// Save score to server\nconst saveScore=async gameData=>{if(!isAuthenticated()){throw new Error('User not authenticated');}const token=localStorage.getItem('tunegie_token');if(!token){throw new Error('No authentication token');}const payload={total_rounds:gameData.totalRounds||gameData.rounds.length,correct_answers:gameData.correctAnswers,score:gameData.score,game_mode:gameData.gameMode,rounds:gameData.rounds.map(round=>({track_id:round.track_id,track_title:round.track_title,track_artist:round.track_artist,album_title:round.album_title,user_guess:round.user_guess,is_correct:round.is_correct,time_taken:round.time_taken,points_earned:round.points_earned}))};console.log('Sending score payload:',payload);const response=await fetch(\"\".concat(API_BASE,\"/backend/php/api/game/save_score.php\"),{method:'POST',headers:{'Content-Type':'application/json','Authorization':\"Bearer \".concat(token)},body:JSON.stringify(payload)});const result=await response.json();console.log('Save score response:',{status:response.status,result});if(!response.ok){console.error('Save score error:',result);throw new Error(result.error||\"Failed to save score (\".concat(response.status,\")\"));}return result;};// Calculate points for a round\nconst calculatePoints=function(isCorrect,timeTaken){let difficulty=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1;if(!isCorrect)return 0;// Base points for correct answer\nlet points=100*difficulty;// Time bonus (faster = more points)\nif(timeTaken<=3)points+=50;// Very fast\nelse if(timeTaken<=5)points+=30;// Fast\nelse if(timeTaken<=10)points+=10;// Normal\nreturn Math.round(points);};// Get current game stats\nconst getCurrentStats=()=>{if(!currentGame)return null;const totalRounds=currentGame.rounds.length;const accuracy=totalRounds>0?currentGame.correctAnswers/totalRounds*100:0;return{rounds:totalRounds,correct:currentGame.correctAnswers,score:currentGame.score,accuracy:Math.round(accuracy*10)/10// Round to 1 decimal\n};};// Abandon current game\nconst abandonGame=()=>{const gameToAbandon=currentGameRef.current||currentGame;if(gameToAbandon){const abandonedGame=_objectSpread(_objectSpread({},gameToAbandon),{},{status:'abandoned',endTime:new Date()});setGameHistory(prev=>[abandonedGame,...prev.slice(0,9)]);}currentGameRef.current=null;setCurrentGame(null);};const value={currentGame,gameHistory,startGame,addRound,endGame,abandonGame,calculatePoints,getCurrentStats,saveScore,isGameActive:()=>{const game=currentGameRef.current||currentGame;return game&&game.status==='active';}};return/*#__PURE__*/_jsx(GameContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useAuth","jsx","_jsx","GameContext","useGame","context","Error","GameProvider","_ref","children","isAuthenticated","API_BASE","currentGame","setCurrentGame","gameHistory","setGameHistory","currentGameRef","current","startGame","gameMode","arguments","length","undefined","newGame","id","Date","now","startTime","rounds","currentRound","score","correctAnswers","status","console","log","addRound","roundData","_roundData$track","_roundData$track2","_roundData$track3","_roundData$track3$art","_roundData$track3$art2","_roundData$track4","_roundData$track4$alb","gameToUpdate","error","round","roundNumber","track_id","track","track_title","title","track_artist","artists","name","album_title","album","user_guess","userGuess","correct_answer","correctAnswer","is_correct","isCorrect","time_taken","timeTaken","points_earned","pointsEarned","timestamp","updatedGame","_objectSpread","endGame","gameToEnd","finalGame","endTime","totalRounds","result","saveScore","saveError","message","prev","slice","serverResult","gameData","token","localStorage","getItem","payload","total_rounds","correct_answers","game_mode","map","response","fetch","concat","method","headers","body","JSON","stringify","json","ok","calculatePoints","difficulty","points","Math","getCurrentStats","accuracy","correct","abandonGame","gameToAbandon","abandonedGame","value","isGameActive","game","Provider"],"sources":["C:/laragon/www/Tunegie/frontend/src/contexts/GameContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\nimport { useAuth } from './AuthContext';\r\n\r\nconst GameContext = createContext();\r\n\r\nexport const useGame = () => {\r\n  const context = useContext(GameContext);\r\n  if (!context) {\r\n    throw new Error('useGame must be used within a GameProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const GameProvider = ({ children }) => {\r\n  const { isAuthenticated, API_BASE } = useAuth();\r\n  const [currentGame, setCurrentGame] = useState(null);\r\n  const [gameHistory, setGameHistory] = useState([]);\r\n  \r\n  // Keep a ref to the current game for immediate access\r\n  const currentGameRef = { current: null };\r\n\r\n  // Start a new game session\r\n  const startGame = (gameMode = 'standard') => {\r\n    const newGame = {\r\n      id: Date.now(),\r\n      gameMode,\r\n      startTime: new Date(),\r\n      rounds: [],\r\n      currentRound: 0,\r\n      score: 0,\r\n      correctAnswers: 0,\r\n      status: 'active'\r\n    };\r\n    currentGameRef.current = newGame;\r\n    setCurrentGame(newGame);\r\n    console.log('Started game and set ref:', newGame.id);\r\n    return newGame;\r\n  };\r\n\r\n  // Add a round result to the current game\r\n  const addRound = (roundData) => {\r\n    const gameToUpdate = currentGameRef.current || currentGame;\r\n    \r\n    console.log('addRound called with game:', gameToUpdate ? {\r\n      id: gameToUpdate.id,\r\n      rounds: gameToUpdate.rounds.length,\r\n      score: gameToUpdate.score\r\n    } : null);\r\n    \r\n    if (!gameToUpdate) {\r\n      console.error('No active game session');\r\n      return null;\r\n    }\r\n\r\n    const round = {\r\n      roundNumber: gameToUpdate.rounds.length + 1,\r\n      track_id: roundData.track?.id || '',\r\n      track_title: roundData.track?.title || '',\r\n      track_artist: roundData.track?.artists?.[0]?.name || '',\r\n      album_title: roundData.track?.album?.title || '',\r\n      user_guess: roundData.userGuess || '',\r\n      correct_answer: roundData.correctAnswer || '',\r\n      is_correct: roundData.isCorrect || false,\r\n      time_taken: roundData.timeTaken || 0,\r\n      points_earned: roundData.pointsEarned || 0,\r\n      timestamp: new Date()\r\n    };\r\n\r\n    const updatedGame = {\r\n      ...gameToUpdate,\r\n      rounds: [...gameToUpdate.rounds, round],\r\n      currentRound: gameToUpdate.currentRound + 1,\r\n      score: gameToUpdate.score + (round.points_earned || 0),\r\n      correctAnswers: gameToUpdate.correctAnswers + (round.is_correct ? 1 : 0)\r\n    };\r\n\r\n    // Update both ref and state\r\n    currentGameRef.current = updatedGame;\r\n    setCurrentGame(updatedGame);\r\n    \r\n    console.log('Updated game state:', {\r\n      id: updatedGame.id,\r\n      rounds: updatedGame.rounds.length,\r\n      score: updatedGame.score,\r\n      correctAnswers: updatedGame.correctAnswers\r\n    });\r\n    \r\n    return updatedGame;\r\n  };\r\n\r\n  // End the current game and save score\r\n  const endGame = async () => {\r\n    const gameToEnd = currentGameRef.current || currentGame;\r\n    \r\n    if (!gameToEnd) {\r\n      console.error('No active game session to end');\r\n      return null;\r\n    }\r\n\r\n    console.log('Ending game with current state:', {\r\n      id: gameToEnd.id,\r\n      rounds: gameToEnd.rounds.length,\r\n      score: gameToEnd.score,\r\n      correctAnswers: gameToEnd.correctAnswers\r\n    });\r\n\r\n    const finalGame = {\r\n      ...gameToEnd,\r\n      status: 'completed',\r\n      endTime: new Date(),\r\n      totalRounds: gameToEnd.rounds.length\r\n    };\r\n\r\n    // Save score if user is authenticated (before clearing currentGame)\r\n    let result = null;\r\n    if (isAuthenticated()) {\r\n      try {\r\n        result = await saveScore(finalGame);\r\n      } catch (error) {\r\n        console.error('Failed to save score:', error);\r\n        result = { saveError: error.message };\r\n      }\r\n    }\r\n\r\n    // Clear current game and update history after saving\r\n    currentGameRef.current = null;\r\n    setCurrentGame(null);\r\n    setGameHistory(prev => [finalGame, ...prev.slice(0, 9)]); // Keep last 10 games\r\n\r\n    return result ? { ...finalGame, serverResult: result } : finalGame;\r\n  };\r\n\r\n  // Save score to server\r\n  const saveScore = async (gameData) => {\r\n    if (!isAuthenticated()) {\r\n      throw new Error('User not authenticated');\r\n    }\r\n\r\n    const token = localStorage.getItem('tunegie_token');\r\n    if (!token) {\r\n      throw new Error('No authentication token');\r\n    }\r\n\r\n    const payload = {\r\n      total_rounds: gameData.totalRounds || gameData.rounds.length,\r\n      correct_answers: gameData.correctAnswers,\r\n      score: gameData.score,\r\n      game_mode: gameData.gameMode,\r\n      rounds: gameData.rounds.map(round => ({\r\n        track_id: round.track_id,\r\n        track_title: round.track_title,\r\n        track_artist: round.track_artist,\r\n        album_title: round.album_title,\r\n        user_guess: round.user_guess,\r\n        is_correct: round.is_correct,\r\n        time_taken: round.time_taken,\r\n        points_earned: round.points_earned\r\n      }))\r\n    };\r\n    \r\n    console.log('Sending score payload:', payload);\r\n\r\n    const response = await fetch(`${API_BASE}/backend/php/api/game/save_score.php`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`\r\n      },\r\n      body: JSON.stringify(payload)\r\n    });\r\n\r\n    const result = await response.json();\r\n    \r\n    console.log('Save score response:', { status: response.status, result });\r\n    \r\n    if (!response.ok) {\r\n      console.error('Save score error:', result);\r\n      throw new Error(result.error || `Failed to save score (${response.status})`);\r\n    }\r\n\r\n    return result;\r\n  };\r\n\r\n  // Calculate points for a round\r\n  const calculatePoints = (isCorrect, timeTaken, difficulty = 1) => {\r\n    if (!isCorrect) return 0;\r\n    \r\n    // Base points for correct answer\r\n    let points = 100 * difficulty;\r\n    \r\n    // Time bonus (faster = more points)\r\n    if (timeTaken <= 3) points += 50; // Very fast\r\n    else if (timeTaken <= 5) points += 30; // Fast\r\n    else if (timeTaken <= 10) points += 10; // Normal\r\n    \r\n    return Math.round(points);\r\n  };\r\n\r\n  // Get current game stats\r\n  const getCurrentStats = () => {\r\n    if (!currentGame) return null;\r\n    \r\n    const totalRounds = currentGame.rounds.length;\r\n    const accuracy = totalRounds > 0 ? (currentGame.correctAnswers / totalRounds) * 100 : 0;\r\n    \r\n    return {\r\n      rounds: totalRounds,\r\n      correct: currentGame.correctAnswers,\r\n      score: currentGame.score,\r\n      accuracy: Math.round(accuracy * 10) / 10 // Round to 1 decimal\r\n    };\r\n  };\r\n\r\n  // Abandon current game\r\n  const abandonGame = () => {\r\n    const gameToAbandon = currentGameRef.current || currentGame;\r\n    if (gameToAbandon) {\r\n      const abandonedGame = {\r\n        ...gameToAbandon,\r\n        status: 'abandoned',\r\n        endTime: new Date()\r\n      };\r\n      setGameHistory(prev => [abandonedGame, ...prev.slice(0, 9)]);\r\n    }\r\n    currentGameRef.current = null;\r\n    setCurrentGame(null);\r\n  };\r\n\r\n  const value = {\r\n    currentGame,\r\n    gameHistory,\r\n    startGame,\r\n    addRound,\r\n    endGame,\r\n    abandonGame,\r\n    calculatePoints,\r\n    getCurrentStats,\r\n    saveScore,\r\n    isGameActive: () => {\r\n      const game = currentGameRef.current || currentGame;\r\n      return game && game.status === 'active';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <GameContext.Provider value={value}>\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}