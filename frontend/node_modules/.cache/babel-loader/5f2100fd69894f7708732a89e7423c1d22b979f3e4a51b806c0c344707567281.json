{"ast":null,"code":"// Helper function to calculate string similarity (Levenshtein distance based)\nexport const calculateSimilarity=(str1,str2)=>{const len1=str1.length;const len2=str2.length;if(len1===0)return len2===0?1:0;if(len2===0)return 0;const matrix=[];for(let i=0;i<=len2;i++){matrix[i]=[i];}for(let j=0;j<=len1;j++){matrix[0][j]=j;}for(let i=1;i<=len2;i++){for(let j=1;j<=len1;j++){if(str2.charAt(i-1)===str1.charAt(j-1)){matrix[i][j]=matrix[i-1][j-1];}else{matrix[i][j]=Math.min(matrix[i-1][j-1]+1,matrix[i][j-1]+1,matrix[i-1][j]+1);}}}const maxLen=Math.max(len1,len2);return(maxLen-matrix[len2][len1])/maxLen;};// Helper function to calculate overlap percentage\nexport const calculateOverlap=(guess,target)=>{const guessWords=guess.split(' ');let matchedChars=0;let totalGuessChars=guess.replace(/\\s/g,'').length;for(const guessWord of guessWords){if(guessWord.length>=2){// Only count meaningful words\nif(target.includes(guessWord)){matchedChars+=guessWord.length;}}}return totalGuessChars>0?matchedChars/totalGuessChars:0;};// Function to validate and score a guess\nexport const validateGuess=(userGuess,currentTrack)=>{if(!userGuess.trim())return{correct:false,matchType:'empty'};const correctAnswer=\"\".concat(currentTrack.title,\" - \").concat(currentTrack.artists[0].name);const guessLower=userGuess.toLowerCase().trim();const titleLower=currentTrack.title.toLowerCase();const artistLower=currentTrack.artists[0].name.toLowerCase();// Declare variables at function level\nlet correct=false;let matchType='';// Require minimum length to prevent single letter matches\nif(guessLower.length<3){correct=false;matchType='too short';console.log(\"\\u274C Guess too short: \\\"\".concat(userGuess,\"\\\" (minimum 3 characters)\"));}else{// More strict matching logic - clean strings for better comparison\nconst cleanGuess=guessLower.replace(/[^a-z0-9\\s]/g,'').replace(/\\s+/g,' ').trim();const cleanTitle=titleLower.replace(/[^a-z0-9\\s]/g,'').replace(/\\s+/g,' ').trim();const cleanArtist=artistLower.replace(/[^a-z0-9\\s]/g,'').replace(/\\s+/g,' ').trim();// Check for substantial matches (not just single letters)\n// 1. Exact matches (highest priority)\nif(cleanGuess===cleanTitle||cleanGuess===cleanArtist){correct=true;matchType='exact';}// 2. Very close matches (80%+ similarity for longer strings)\nelse if(cleanGuess.length>=5){const titleSimilarity=calculateSimilarity(cleanGuess,cleanTitle);const artistSimilarity=calculateSimilarity(cleanGuess,cleanArtist);if(titleSimilarity>=0.8||artistSimilarity>=0.8){correct=true;matchType='very close';}// 3. Contains significant portion (50%+ of the guess must match)\nelse{const titleOverlap=calculateOverlap(cleanGuess,cleanTitle);const artistOverlap=calculateOverlap(cleanGuess,cleanArtist);if(titleOverlap>=0.5||artistOverlap>=0.5){correct=true;matchType='partial';}}}// 4. For shorter guesses (3-4 chars), require exact substring match\nelse{if(cleanTitle.includes(cleanGuess)||cleanArtist.includes(cleanGuess)){// Additional check: the guess should be a meaningful part (not just common words)\nconst commonWords=['the','and','you','are','for','all','not','but','can','had','was'];if(!commonWords.includes(cleanGuess)){correct=true;matchType='substring';}}}}// Log result\nconsole.log(\"\\uD83C\\uDFAF Guess: \\\"\".concat(userGuess,\"\\\" | Title: \\\"\").concat(currentTrack.title,\"\\\" | Artist: \\\"\").concat(currentTrack.artists[0].name,\"\\\" | Match: \").concat(correct?\"\\u2705 \".concat(matchType):\"\\u274C \".concat(matchType||'no match')));return{correct,matchType,correctAnswer};};// Function to determine if an album is a single release\nexport const isSingleRelease=(albumTitle,trackTitle)=>{if(!albumTitle)return false;return albumTitle.toLowerCase().includes('single')||albumTitle.toLowerCase()===trackTitle.toLowerCase()||albumTitle.toLowerCase().includes(' - single')||albumTitle.toLowerCase().includes('(single)')||albumTitle.toLowerCase().includes('- ep')||albumTitle.toLowerCase().includes('(ep)')||albumTitle.toLowerCase().includes(trackTitle.toLowerCase())||trackTitle.toLowerCase().includes(albumTitle.toLowerCase())||albumTitle.toLowerCase().includes('remix')||albumTitle.toLowerCase().includes('feat.')||albumTitle.toLowerCase().includes('featuring')||albumTitle.split(' ').length<=3;};","map":{"version":3,"names":["calculateSimilarity","str1","str2","len1","length","len2","matrix","i","j","charAt","Math","min","maxLen","max","calculateOverlap","guess","target","guessWords","split","matchedChars","totalGuessChars","replace","guessWord","includes","validateGuess","userGuess","currentTrack","trim","correct","matchType","correctAnswer","concat","title","artists","name","guessLower","toLowerCase","titleLower","artistLower","console","log","cleanGuess","cleanTitle","cleanArtist","titleSimilarity","artistSimilarity","titleOverlap","artistOverlap","commonWords","isSingleRelease","albumTitle","trackTitle"],"sources":["C:/laragon/www/Tunegie/frontend/src/utils/gameUtils.js"],"sourcesContent":["// Helper function to calculate string similarity (Levenshtein distance based)\r\nexport const calculateSimilarity = (str1, str2) => {\r\n  const len1 = str1.length;\r\n  const len2 = str2.length;\r\n  \r\n  if (len1 === 0) return len2 === 0 ? 1 : 0;\r\n  if (len2 === 0) return 0;\r\n  \r\n  const matrix = [];\r\n  for (let i = 0; i <= len2; i++) {\r\n    matrix[i] = [i];\r\n  }\r\n  for (let j = 0; j <= len1; j++) {\r\n    matrix[0][j] = j;\r\n  }\r\n  \r\n  for (let i = 1; i <= len2; i++) {\r\n    for (let j = 1; j <= len1; j++) {\r\n      if (str2.charAt(i - 1) === str1.charAt(j - 1)) {\r\n        matrix[i][j] = matrix[i - 1][j - 1];\r\n      } else {\r\n        matrix[i][j] = Math.min(\r\n          matrix[i - 1][j - 1] + 1,\r\n          matrix[i][j - 1] + 1,\r\n          matrix[i - 1][j] + 1\r\n        );\r\n      }\r\n    }\r\n  }\r\n  \r\n  const maxLen = Math.max(len1, len2);\r\n  return (maxLen - matrix[len2][len1]) / maxLen;\r\n};\r\n\r\n// Helper function to calculate overlap percentage\r\nexport const calculateOverlap = (guess, target) => {\r\n  const guessWords = guess.split(' ');\r\n  \r\n  let matchedChars = 0;\r\n  let totalGuessChars = guess.replace(/\\s/g, '').length;\r\n  \r\n  for (const guessWord of guessWords) {\r\n    if (guessWord.length >= 2) { // Only count meaningful words\r\n      if (target.includes(guessWord)) {\r\n        matchedChars += guessWord.length;\r\n      }\r\n    }\r\n  }\r\n  \r\n  return totalGuessChars > 0 ? matchedChars / totalGuessChars : 0;\r\n};\r\n\r\n// Function to validate and score a guess\r\nexport const validateGuess = (userGuess, currentTrack) => {\r\n  if (!userGuess.trim()) return { correct: false, matchType: 'empty' };\r\n\r\n  const correctAnswer = `${currentTrack.title} - ${currentTrack.artists[0].name}`;\r\n  const guessLower = userGuess.toLowerCase().trim();\r\n  const titleLower = currentTrack.title.toLowerCase();\r\n  const artistLower = currentTrack.artists[0].name.toLowerCase();\r\n\r\n  // Declare variables at function level\r\n  let correct = false;\r\n  let matchType = '';\r\n\r\n  // Require minimum length to prevent single letter matches\r\n  if (guessLower.length < 3) {\r\n    correct = false;\r\n    matchType = 'too short';\r\n    console.log(`❌ Guess too short: \"${userGuess}\" (minimum 3 characters)`);\r\n  } else {\r\n    // More strict matching logic - clean strings for better comparison\r\n    const cleanGuess = guessLower.replace(/[^a-z0-9\\s]/g, '').replace(/\\s+/g, ' ').trim();\r\n    const cleanTitle = titleLower.replace(/[^a-z0-9\\s]/g, '').replace(/\\s+/g, ' ').trim();\r\n    const cleanArtist = artistLower.replace(/[^a-z0-9\\s]/g, '').replace(/\\s+/g, ' ').trim();\r\n    \r\n    // Check for substantial matches (not just single letters)\r\n    \r\n    // 1. Exact matches (highest priority)\r\n    if (cleanGuess === cleanTitle || cleanGuess === cleanArtist) {\r\n      correct = true;\r\n      matchType = 'exact';\r\n    }\r\n    // 2. Very close matches (80%+ similarity for longer strings)\r\n    else if (cleanGuess.length >= 5) {\r\n      const titleSimilarity = calculateSimilarity(cleanGuess, cleanTitle);\r\n      const artistSimilarity = calculateSimilarity(cleanGuess, cleanArtist);\r\n      \r\n      if (titleSimilarity >= 0.8 || artistSimilarity >= 0.8) {\r\n        correct = true;\r\n        matchType = 'very close';\r\n      }\r\n      // 3. Contains significant portion (50%+ of the guess must match)\r\n      else {\r\n        const titleOverlap = calculateOverlap(cleanGuess, cleanTitle);\r\n        const artistOverlap = calculateOverlap(cleanGuess, cleanArtist);\r\n        \r\n        if (titleOverlap >= 0.5 || artistOverlap >= 0.5) {\r\n          correct = true;\r\n          matchType = 'partial';\r\n        }\r\n      }\r\n    }\r\n    // 4. For shorter guesses (3-4 chars), require exact substring match\r\n    else {\r\n      if (cleanTitle.includes(cleanGuess) || cleanArtist.includes(cleanGuess)) {\r\n        // Additional check: the guess should be a meaningful part (not just common words)\r\n        const commonWords = ['the', 'and', 'you', 'are', 'for', 'all', 'not', 'but', 'can', 'had', 'was'];\r\n        if (!commonWords.includes(cleanGuess)) {\r\n          correct = true;\r\n          matchType = 'substring';\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Log result\r\n  console.log(`🎯 Guess: \"${userGuess}\" | Title: \"${currentTrack.title}\" | Artist: \"${currentTrack.artists[0].name}\" | Match: ${correct ? `✅ ${matchType}` : `❌ ${matchType || 'no match'}`}`);\r\n  \r\n  return {\r\n    correct,\r\n    matchType,\r\n    correctAnswer\r\n  };\r\n};\r\n\r\n// Function to determine if an album is a single release\r\nexport const isSingleRelease = (albumTitle, trackTitle) => {\r\n  if (!albumTitle) return false;\r\n  \r\n  return albumTitle.toLowerCase().includes('single') ||\r\n    albumTitle.toLowerCase() === trackTitle.toLowerCase() ||\r\n    albumTitle.toLowerCase().includes(' - single') ||\r\n    albumTitle.toLowerCase().includes('(single)') ||\r\n    albumTitle.toLowerCase().includes('- ep') ||\r\n    albumTitle.toLowerCase().includes('(ep)') ||\r\n    albumTitle.toLowerCase().includes(trackTitle.toLowerCase()) ||\r\n    trackTitle.toLowerCase().includes(albumTitle.toLowerCase()) ||\r\n    albumTitle.toLowerCase().includes('remix') ||\r\n    albumTitle.toLowerCase().includes('feat.') ||\r\n    albumTitle.toLowerCase().includes('featuring') ||\r\n    albumTitle.split(' ').length <= 3;\r\n};"],"mappings":"AAAA;AACA,MAAO,MAAM,CAAAA,mBAAmB,CAAGA,CAACC,IAAI,CAAEC,IAAI,GAAK,CACjD,KAAM,CAAAC,IAAI,CAAGF,IAAI,CAACG,MAAM,CACxB,KAAM,CAAAC,IAAI,CAAGH,IAAI,CAACE,MAAM,CAExB,GAAID,IAAI,GAAK,CAAC,CAAE,MAAO,CAAAE,IAAI,GAAK,CAAC,CAAG,CAAC,CAAG,CAAC,CACzC,GAAIA,IAAI,GAAK,CAAC,CAAE,MAAO,EAAC,CAExB,KAAM,CAAAC,MAAM,CAAG,EAAE,CACjB,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAIF,IAAI,CAAEE,CAAC,EAAE,CAAE,CAC9BD,MAAM,CAACC,CAAC,CAAC,CAAG,CAACA,CAAC,CAAC,CACjB,CACA,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAIL,IAAI,CAAEK,CAAC,EAAE,CAAE,CAC9BF,MAAM,CAAC,CAAC,CAAC,CAACE,CAAC,CAAC,CAAGA,CAAC,CAClB,CAEA,IAAK,GAAI,CAAAD,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAIF,IAAI,CAAEE,CAAC,EAAE,CAAE,CAC9B,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAIL,IAAI,CAAEK,CAAC,EAAE,CAAE,CAC9B,GAAIN,IAAI,CAACO,MAAM,CAACF,CAAC,CAAG,CAAC,CAAC,GAAKN,IAAI,CAACQ,MAAM,CAACD,CAAC,CAAG,CAAC,CAAC,CAAE,CAC7CF,MAAM,CAACC,CAAC,CAAC,CAACC,CAAC,CAAC,CAAGF,MAAM,CAACC,CAAC,CAAG,CAAC,CAAC,CAACC,CAAC,CAAG,CAAC,CAAC,CACrC,CAAC,IAAM,CACLF,MAAM,CAACC,CAAC,CAAC,CAACC,CAAC,CAAC,CAAGE,IAAI,CAACC,GAAG,CACrBL,MAAM,CAACC,CAAC,CAAG,CAAC,CAAC,CAACC,CAAC,CAAG,CAAC,CAAC,CAAG,CAAC,CACxBF,MAAM,CAACC,CAAC,CAAC,CAACC,CAAC,CAAG,CAAC,CAAC,CAAG,CAAC,CACpBF,MAAM,CAACC,CAAC,CAAG,CAAC,CAAC,CAACC,CAAC,CAAC,CAAG,CACrB,CAAC,CACH,CACF,CACF,CAEA,KAAM,CAAAI,MAAM,CAAGF,IAAI,CAACG,GAAG,CAACV,IAAI,CAAEE,IAAI,CAAC,CACnC,MAAO,CAACO,MAAM,CAAGN,MAAM,CAACD,IAAI,CAAC,CAACF,IAAI,CAAC,EAAIS,MAAM,CAC/C,CAAC,CAED;AACA,MAAO,MAAM,CAAAE,gBAAgB,CAAGA,CAACC,KAAK,CAAEC,MAAM,GAAK,CACjD,KAAM,CAAAC,UAAU,CAAGF,KAAK,CAACG,KAAK,CAAC,GAAG,CAAC,CAEnC,GAAI,CAAAC,YAAY,CAAG,CAAC,CACpB,GAAI,CAAAC,eAAe,CAAGL,KAAK,CAACM,OAAO,CAAC,KAAK,CAAE,EAAE,CAAC,CAACjB,MAAM,CAErD,IAAK,KAAM,CAAAkB,SAAS,GAAI,CAAAL,UAAU,CAAE,CAClC,GAAIK,SAAS,CAAClB,MAAM,EAAI,CAAC,CAAE,CAAE;AAC3B,GAAIY,MAAM,CAACO,QAAQ,CAACD,SAAS,CAAC,CAAE,CAC9BH,YAAY,EAAIG,SAAS,CAAClB,MAAM,CAClC,CACF,CACF,CAEA,MAAO,CAAAgB,eAAe,CAAG,CAAC,CAAGD,YAAY,CAAGC,eAAe,CAAG,CAAC,CACjE,CAAC,CAED;AACA,MAAO,MAAM,CAAAI,aAAa,CAAGA,CAACC,SAAS,CAAEC,YAAY,GAAK,CACxD,GAAI,CAACD,SAAS,CAACE,IAAI,CAAC,CAAC,CAAE,MAAO,CAAEC,OAAO,CAAE,KAAK,CAAEC,SAAS,CAAE,OAAQ,CAAC,CAEpE,KAAM,CAAAC,aAAa,IAAAC,MAAA,CAAML,YAAY,CAACM,KAAK,QAAAD,MAAA,CAAML,YAAY,CAACO,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,CAAE,CAC/E,KAAM,CAAAC,UAAU,CAAGV,SAAS,CAACW,WAAW,CAAC,CAAC,CAACT,IAAI,CAAC,CAAC,CACjD,KAAM,CAAAU,UAAU,CAAGX,YAAY,CAACM,KAAK,CAACI,WAAW,CAAC,CAAC,CACnD,KAAM,CAAAE,WAAW,CAAGZ,YAAY,CAACO,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,CAACE,WAAW,CAAC,CAAC,CAE9D;AACA,GAAI,CAAAR,OAAO,CAAG,KAAK,CACnB,GAAI,CAAAC,SAAS,CAAG,EAAE,CAElB;AACA,GAAIM,UAAU,CAAC/B,MAAM,CAAG,CAAC,CAAE,CACzBwB,OAAO,CAAG,KAAK,CACfC,SAAS,CAAG,WAAW,CACvBU,OAAO,CAACC,GAAG,8BAAAT,MAAA,CAAwBN,SAAS,6BAA0B,CAAC,CACzE,CAAC,IAAM,CACL;AACA,KAAM,CAAAgB,UAAU,CAAGN,UAAU,CAACd,OAAO,CAAC,cAAc,CAAE,EAAE,CAAC,CAACA,OAAO,CAAC,MAAM,CAAE,GAAG,CAAC,CAACM,IAAI,CAAC,CAAC,CACrF,KAAM,CAAAe,UAAU,CAAGL,UAAU,CAAChB,OAAO,CAAC,cAAc,CAAE,EAAE,CAAC,CAACA,OAAO,CAAC,MAAM,CAAE,GAAG,CAAC,CAACM,IAAI,CAAC,CAAC,CACrF,KAAM,CAAAgB,WAAW,CAAGL,WAAW,CAACjB,OAAO,CAAC,cAAc,CAAE,EAAE,CAAC,CAACA,OAAO,CAAC,MAAM,CAAE,GAAG,CAAC,CAACM,IAAI,CAAC,CAAC,CAEvF;AAEA;AACA,GAAIc,UAAU,GAAKC,UAAU,EAAID,UAAU,GAAKE,WAAW,CAAE,CAC3Df,OAAO,CAAG,IAAI,CACdC,SAAS,CAAG,OAAO,CACrB,CACA;AAAA,IACK,IAAIY,UAAU,CAACrC,MAAM,EAAI,CAAC,CAAE,CAC/B,KAAM,CAAAwC,eAAe,CAAG5C,mBAAmB,CAACyC,UAAU,CAAEC,UAAU,CAAC,CACnE,KAAM,CAAAG,gBAAgB,CAAG7C,mBAAmB,CAACyC,UAAU,CAAEE,WAAW,CAAC,CAErE,GAAIC,eAAe,EAAI,GAAG,EAAIC,gBAAgB,EAAI,GAAG,CAAE,CACrDjB,OAAO,CAAG,IAAI,CACdC,SAAS,CAAG,YAAY,CAC1B,CACA;AAAA,IACK,CACH,KAAM,CAAAiB,YAAY,CAAGhC,gBAAgB,CAAC2B,UAAU,CAAEC,UAAU,CAAC,CAC7D,KAAM,CAAAK,aAAa,CAAGjC,gBAAgB,CAAC2B,UAAU,CAAEE,WAAW,CAAC,CAE/D,GAAIG,YAAY,EAAI,GAAG,EAAIC,aAAa,EAAI,GAAG,CAAE,CAC/CnB,OAAO,CAAG,IAAI,CACdC,SAAS,CAAG,SAAS,CACvB,CACF,CACF,CACA;AAAA,IACK,CACH,GAAIa,UAAU,CAACnB,QAAQ,CAACkB,UAAU,CAAC,EAAIE,WAAW,CAACpB,QAAQ,CAACkB,UAAU,CAAC,CAAE,CACvE;AACA,KAAM,CAAAO,WAAW,CAAG,CAAC,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CAAC,CACjG,GAAI,CAACA,WAAW,CAACzB,QAAQ,CAACkB,UAAU,CAAC,CAAE,CACrCb,OAAO,CAAG,IAAI,CACdC,SAAS,CAAG,WAAW,CACzB,CACF,CACF,CACF,CAEA;AACAU,OAAO,CAACC,GAAG,0BAAAT,MAAA,CAAeN,SAAS,mBAAAM,MAAA,CAAeL,YAAY,CAACM,KAAK,oBAAAD,MAAA,CAAgBL,YAAY,CAACO,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,iBAAAH,MAAA,CAAcH,OAAO,WAAAG,MAAA,CAAQF,SAAS,YAAAE,MAAA,CAAUF,SAAS,EAAI,UAAU,CAAE,CAAE,CAAC,CAE5L,MAAO,CACLD,OAAO,CACPC,SAAS,CACTC,aACF,CAAC,CACH,CAAC,CAED;AACA,MAAO,MAAM,CAAAmB,eAAe,CAAGA,CAACC,UAAU,CAAEC,UAAU,GAAK,CACzD,GAAI,CAACD,UAAU,CAAE,MAAO,MAAK,CAE7B,MAAO,CAAAA,UAAU,CAACd,WAAW,CAAC,CAAC,CAACb,QAAQ,CAAC,QAAQ,CAAC,EAChD2B,UAAU,CAACd,WAAW,CAAC,CAAC,GAAKe,UAAU,CAACf,WAAW,CAAC,CAAC,EACrDc,UAAU,CAACd,WAAW,CAAC,CAAC,CAACb,QAAQ,CAAC,WAAW,CAAC,EAC9C2B,UAAU,CAACd,WAAW,CAAC,CAAC,CAACb,QAAQ,CAAC,UAAU,CAAC,EAC7C2B,UAAU,CAACd,WAAW,CAAC,CAAC,CAACb,QAAQ,CAAC,MAAM,CAAC,EACzC2B,UAAU,CAACd,WAAW,CAAC,CAAC,CAACb,QAAQ,CAAC,MAAM,CAAC,EACzC2B,UAAU,CAACd,WAAW,CAAC,CAAC,CAACb,QAAQ,CAAC4B,UAAU,CAACf,WAAW,CAAC,CAAC,CAAC,EAC3De,UAAU,CAACf,WAAW,CAAC,CAAC,CAACb,QAAQ,CAAC2B,UAAU,CAACd,WAAW,CAAC,CAAC,CAAC,EAC3Dc,UAAU,CAACd,WAAW,CAAC,CAAC,CAACb,QAAQ,CAAC,OAAO,CAAC,EAC1C2B,UAAU,CAACd,WAAW,CAAC,CAAC,CAACb,QAAQ,CAAC,OAAO,CAAC,EAC1C2B,UAAU,CAACd,WAAW,CAAC,CAAC,CAACb,QAAQ,CAAC,WAAW,CAAC,EAC9C2B,UAAU,CAAChC,KAAK,CAAC,GAAG,CAAC,CAACd,MAAM,EAAI,CAAC,CACrC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}