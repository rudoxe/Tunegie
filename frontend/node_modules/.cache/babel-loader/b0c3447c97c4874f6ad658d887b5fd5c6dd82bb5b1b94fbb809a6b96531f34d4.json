{"ast":null,"code":"var _jsxFileName = \"C:\\\\laragon\\\\www\\\\Tunegie\\\\frontend\\\\src\\\\pages\\\\Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport itunesApiService from '../services/itunesApi';\nimport { useGame } from '../contexts/GameContext';\nimport { useAuth } from '../contexts/AuthContext';\nimport { validateGuess } from '../utils/gameUtils';\n\n// Import organized components\nimport GameModeSelector from '../components/Game/GameModeSelector';\nimport GameScreen from '../components/Game/GameScreen';\nimport { LoadingScreen, ErrorScreen, ReadyScreen, FinishedScreen } from '../components/Game/GameScreens';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Game() {\n  _s();\n  const {\n    startGame,\n    addRound,\n    endGame,\n    calculatePoints\n  } = useGame();\n  const {\n    isAuthenticated\n  } = useAuth();\n  const [gameState, setGameState] = useState('loading'); // selectMode, loading, ready, playing, finished, error\n  const [currentTrack, setCurrentTrack] = useState(null);\n  const [difficulty, setDifficulty] = useState('medium'); // easy (10s), medium (5s), hard (2s)\n  const [gameData, setGameData] = useState({\n    tracks: [],\n    backupTracks: [],\n    usedTrackIds: [],\n    currentIndex: 0,\n    score: 0,\n    totalQuestions: 10,\n    answers: [],\n    gameMode: null,\n    // 'random', 'artist', 'genre'\n    selectedArtist: null,\n    selectedGenre: null,\n    difficulty: 'medium'\n  });\n  const [userGuess, setUserGuess] = useState('');\n  const [showAnswer, setShowAnswer] = useState(false);\n  const [isCorrect, setIsCorrect] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [cheatMode, setCheatMode] = useState(false);\n\n  // Initialize game - start with mode selection\n  useEffect(() => {\n    setGameState('selectMode');\n  }, []);\n  const initializeGame = async (gameMode, selectedOption = null) => {\n    setGameState('loading');\n    setErrorMessage('');\n    try {\n      console.log(`🎮 Initializing Tunegie Game (${gameMode} mode)...`);\n      console.log('🎵 Using iTunes API for real music tracks');\n\n      // Test iTunes API connection\n      const connected = await itunesApiService.testConnection();\n      if (!connected) {\n        throw new Error('Unable to connect to iTunes API. Please check your internet connection.');\n      }\n\n      // Load tracks based on game mode\n      let tracks = [];\n      console.log(`🎵 Loading ${gameMode} tracks...`);\n\n      // Load more tracks than needed to avoid duplicates and have variety\n      const tracksToLoad = Math.max(gameData.totalQuestions * 3, 50); // Load 3x more tracks for variety\n\n      if (gameMode === 'artist' && selectedOption) {\n        tracks = await itunesApiService.getTracksByArtist(selectedOption, tracksToLoad);\n        console.log(`🎤 Loaded ${tracks.length} tracks for artist: ${selectedOption}`);\n      } else if (gameMode === 'genre' && selectedOption) {\n        tracks = await itunesApiService.getTracksByGenre(selectedOption, tracksToLoad);\n        console.log(`🎼 Loaded ${tracks.length} tracks for genre: ${selectedOption}`);\n      } else {\n        tracks = await itunesApiService.getRandomTracksForGame(tracksToLoad);\n        console.log(`🎲 Loaded ${tracks.length} random tracks`);\n      }\n      if (tracks.length === 0) {\n        throw new Error(`No tracks available for ${gameMode} mode. Please try a different option.`);\n      }\n\n      // Shuffle all tracks to ensure randomness\n      const shuffledTracks = tracks.sort(() => 0.5 - Math.random());\n\n      // Select only the number we need for the game (but keep extras as backups)\n      const gameTracks = shuffledTracks.slice(0, gameData.totalQuestions);\n      const backupTracks = shuffledTracks.slice(gameData.totalQuestions);\n      console.log(`✅ Selected ${gameTracks.length} tracks for the game (${backupTracks.length} backup tracks available)`);\n      setGameData(prev => ({\n        ...prev,\n        tracks: gameTracks,\n        backupTracks: backupTracks,\n        // Store backup tracks for replacement if needed\n        usedTrackIds: [],\n        // Track which songs have been used\n        currentIndex: 0,\n        score: 0,\n        answers: [],\n        gameMode: gameMode,\n        selectedArtist: gameMode === 'artist' ? selectedOption : null,\n        selectedGenre: gameMode === 'genre' ? selectedOption : null,\n        difficulty: difficulty\n      }));\n      setCurrentTrack(gameTracks[0]);\n      setGameState('ready');\n    } catch (error) {\n      console.error('❌ Game initialization failed:', error);\n      setErrorMessage(error.message);\n      setGameState('error');\n    }\n  };\n  const startGameSession = () => {\n    setGameState('playing');\n    setShowAnswer(false);\n    setUserGuess('');\n\n    // Start game session in GameContext\n    const gameMode = gameData.gameMode || 'random';\n    startGame(gameMode);\n  };\n  const submitGuess = () => {\n    if (!userGuess.trim()) return;\n    const result = validateGuess(userGuess, currentTrack);\n    const {\n      correct,\n      correctAnswer\n    } = result;\n    setIsCorrect(correct);\n    setShowAnswer(true);\n\n    // Calculate time taken (for now use a random value, in real game you'd track actual time)\n    const timeTaken = Math.floor(Math.random() * 20) + 5; // 5-25 seconds\n    const pointsEarned = calculatePoints(correct, timeTaken);\n\n    // Add round to GameContext\n    addRound({\n      track: {\n        id: currentTrack.id || currentTrack.title,\n        title: currentTrack.title,\n        artists: currentTrack.artists,\n        album: currentTrack.album\n      },\n      userGuess,\n      correctAnswer,\n      isCorrect: correct,\n      timeTaken,\n      pointsEarned\n    });\n\n    // Update local game state\n    const newAnswer = {\n      track: currentTrack,\n      guess: userGuess,\n      correct: correct,\n      correctAnswer: correctAnswer\n    };\n    setGameData(prev => ({\n      ...prev,\n      score: correct ? prev.score + pointsEarned : prev.score,\n      answers: [...prev.answers, newAnswer]\n    }));\n  };\n  const nextQuestion = async () => {\n    var _nextTrack$artists, _nextTrack$artists$;\n    const nextIndex = gameData.currentIndex + 1;\n    if (nextIndex >= gameData.tracks.length) {\n      // Game is finished, end the game session and save score\n      if (isAuthenticated()) {\n        try {\n          const result = await endGame();\n          console.log('Game ended and score saved:', result);\n        } catch (error) {\n          console.error('Failed to save game score:', error);\n        }\n      }\n      setGameState('finished');\n      return;\n    }\n\n    // Mark current track as used\n    const currentTrackId = currentTrack === null || currentTrack === void 0 ? void 0 : currentTrack.id;\n    const updatedUsedTrackIds = currentTrackId ? [...gameData.usedTrackIds, currentTrackId] : gameData.usedTrackIds;\n    setGameData(prev => ({\n      ...prev,\n      currentIndex: nextIndex,\n      usedTrackIds: updatedUsedTrackIds\n    }));\n    const nextTrack = gameData.tracks[nextIndex];\n    setCurrentTrack(nextTrack);\n    setUserGuess('');\n    setShowAnswer(false);\n    setCheatMode(false); // Auto-disable cheat mode on next question\n\n    console.log(`🎵 Playing track ${nextIndex + 1}/${gameData.totalQuestions}: \"${nextTrack === null || nextTrack === void 0 ? void 0 : nextTrack.title}\" by ${nextTrack === null || nextTrack === void 0 ? void 0 : (_nextTrack$artists = nextTrack.artists) === null || _nextTrack$artists === void 0 ? void 0 : (_nextTrack$artists$ = _nextTrack$artists[0]) === null || _nextTrack$artists$ === void 0 ? void 0 : _nextTrack$artists$.name}`);\n  };\n  const restartGame = () => {\n    setGameState('selectMode');\n  };\n  const selectGameMode = (mode, option = null) => {\n    initializeGame(mode, option);\n  };\n\n  // Handlers for the components\n  const handleModeSelection = (mode, option = null) => {\n    selectGameMode(mode, option);\n  };\n  const handleToggleCheatMode = () => {\n    setCheatMode(prev => !prev);\n  };\n  const handleRetry = () => {\n    setGameState('selectMode');\n  };\n  const handleDifficultyChange = newDifficulty => {\n    setDifficulty(newDifficulty);\n    setGameData(prev => ({\n      ...prev,\n      difficulty: newDifficulty\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full min-h-screen py-8\",\n    children: [gameState === 'selectMode' && /*#__PURE__*/_jsxDEV(GameModeSelector, {\n      onSelectMode: handleModeSelection\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 9\n    }, this), gameState === 'loading' && /*#__PURE__*/_jsxDEV(LoadingScreen, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 35\n    }, this), gameState === 'error' && /*#__PURE__*/_jsxDEV(ErrorScreen, {\n      errorMessage: errorMessage,\n      onRetry: handleRetry\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 9\n    }, this), gameState === 'ready' && /*#__PURE__*/_jsxDEV(ReadyScreen, {\n      gameData: gameData,\n      difficulty: difficulty,\n      onDifficultyChange: handleDifficultyChange,\n      onStart: startGameSession\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 9\n    }, this), gameState === 'playing' && /*#__PURE__*/_jsxDEV(GameScreen, {\n      gameData: gameData,\n      currentTrack: currentTrack,\n      difficulty: difficulty,\n      userGuess: userGuess,\n      setUserGuess: setUserGuess,\n      showAnswer: showAnswer,\n      isCorrect: isCorrect,\n      cheatMode: cheatMode,\n      onToggleCheatMode: handleToggleCheatMode,\n      onSubmitGuess: submitGuess,\n      onNextQuestion: nextQuestion\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 9\n    }, this), gameState === 'finished' && /*#__PURE__*/_jsxDEV(FinishedScreen, {\n      gameData: gameData,\n      onRestart: restartGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 232,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"WdptpRyrC1AeRPQNbZZieCFaEoA=\", false, function () {\n  return [useGame, useAuth];\n});\n_c = Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","itunesApiService","useGame","useAuth","validateGuess","GameModeSelector","GameScreen","LoadingScreen","ErrorScreen","ReadyScreen","FinishedScreen","jsxDEV","_jsxDEV","Game","_s","startGame","addRound","endGame","calculatePoints","isAuthenticated","gameState","setGameState","currentTrack","setCurrentTrack","difficulty","setDifficulty","gameData","setGameData","tracks","backupTracks","usedTrackIds","currentIndex","score","totalQuestions","answers","gameMode","selectedArtist","selectedGenre","userGuess","setUserGuess","showAnswer","setShowAnswer","isCorrect","setIsCorrect","errorMessage","setErrorMessage","cheatMode","setCheatMode","initializeGame","selectedOption","console","log","connected","testConnection","Error","tracksToLoad","Math","max","getTracksByArtist","length","getTracksByGenre","getRandomTracksForGame","shuffledTracks","sort","random","gameTracks","slice","prev","error","message","startGameSession","submitGuess","trim","result","correct","correctAnswer","timeTaken","floor","pointsEarned","track","id","title","artists","album","newAnswer","guess","nextQuestion","_nextTrack$artists","_nextTrack$artists$","nextIndex","currentTrackId","updatedUsedTrackIds","nextTrack","name","restartGame","selectGameMode","mode","option","handleModeSelection","handleToggleCheatMode","handleRetry","handleDifficultyChange","newDifficulty","className","children","onSelectMode","fileName","_jsxFileName","lineNumber","columnNumber","onRetry","onDifficultyChange","onStart","onToggleCheatMode","onSubmitGuess","onNextQuestion","onRestart","_c","$RefreshReg$"],"sources":["C:/laragon/www/Tunegie/frontend/src/pages/Game.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport itunesApiService from '../services/itunesApi';\r\nimport { useGame } from '../contexts/GameContext';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { validateGuess } from '../utils/gameUtils';\r\n\r\n// Import organized components\r\nimport GameModeSelector from '../components/Game/GameModeSelector';\r\nimport GameScreen from '../components/Game/GameScreen';\r\nimport { LoadingScreen, ErrorScreen, ReadyScreen, FinishedScreen } from '../components/Game/GameScreens';\r\n\r\nexport default function Game() {\r\n  const { startGame, addRound, endGame, calculatePoints } = useGame();\r\n  const { isAuthenticated } = useAuth();\r\n  const [gameState, setGameState] = useState('loading'); // selectMode, loading, ready, playing, finished, error\r\n  const [currentTrack, setCurrentTrack] = useState(null);\r\n  const [difficulty, setDifficulty] = useState('medium'); // easy (10s), medium (5s), hard (2s)\r\n  const [gameData, setGameData] = useState({\r\n    tracks: [],\r\n    backupTracks: [],\r\n    usedTrackIds: [],\r\n    currentIndex: 0,\r\n    score: 0,\r\n    totalQuestions: 10,\r\n    answers: [],\r\n    gameMode: null, // 'random', 'artist', 'genre'\r\n    selectedArtist: null,\r\n    selectedGenre: null,\r\n    difficulty: 'medium'\r\n  });\r\n  const [userGuess, setUserGuess] = useState('');\r\n  const [showAnswer, setShowAnswer] = useState(false);\r\n  const [isCorrect, setIsCorrect] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const [cheatMode, setCheatMode] = useState(false);\r\n\r\n  // Initialize game - start with mode selection\r\n  useEffect(() => {\r\n    setGameState('selectMode');\r\n  }, []);\r\n\r\n  const initializeGame = async (gameMode, selectedOption = null) => {\r\n    setGameState('loading');\r\n    setErrorMessage('');\r\n\r\n    try {\r\n      console.log(`🎮 Initializing Tunegie Game (${gameMode} mode)...`);\r\n      console.log('🎵 Using iTunes API for real music tracks');\r\n      \r\n      // Test iTunes API connection\r\n      const connected = await itunesApiService.testConnection();\r\n\r\n      if (!connected) {\r\n        throw new Error('Unable to connect to iTunes API. Please check your internet connection.');\r\n      }\r\n\r\n      // Load tracks based on game mode\r\n      let tracks = [];\r\n      console.log(`🎵 Loading ${gameMode} tracks...`);\r\n      \r\n      // Load more tracks than needed to avoid duplicates and have variety\r\n      const tracksToLoad = Math.max(gameData.totalQuestions * 3, 50); // Load 3x more tracks for variety\r\n      \r\n      if (gameMode === 'artist' && selectedOption) {\r\n        tracks = await itunesApiService.getTracksByArtist(selectedOption, tracksToLoad);\r\n        console.log(`🎤 Loaded ${tracks.length} tracks for artist: ${selectedOption}`);\r\n      } else if (gameMode === 'genre' && selectedOption) {\r\n        tracks = await itunesApiService.getTracksByGenre(selectedOption, tracksToLoad);\r\n        console.log(`🎼 Loaded ${tracks.length} tracks for genre: ${selectedOption}`);\r\n      } else {\r\n        tracks = await itunesApiService.getRandomTracksForGame(tracksToLoad);\r\n        console.log(`🎲 Loaded ${tracks.length} random tracks`);\r\n      }\r\n      \r\n      if (tracks.length === 0) {\r\n        throw new Error(`No tracks available for ${gameMode} mode. Please try a different option.`);\r\n      }\r\n\r\n      // Shuffle all tracks to ensure randomness\r\n      const shuffledTracks = tracks.sort(() => 0.5 - Math.random());\r\n      \r\n      // Select only the number we need for the game (but keep extras as backups)\r\n      const gameTracks = shuffledTracks.slice(0, gameData.totalQuestions);\r\n      const backupTracks = shuffledTracks.slice(gameData.totalQuestions);\r\n      \r\n      console.log(`✅ Selected ${gameTracks.length} tracks for the game (${backupTracks.length} backup tracks available)`);\r\n      \r\n      setGameData(prev => ({\r\n        ...prev,\r\n        tracks: gameTracks,\r\n        backupTracks: backupTracks, // Store backup tracks for replacement if needed\r\n        usedTrackIds: [], // Track which songs have been used\r\n        currentIndex: 0,\r\n        score: 0,\r\n        answers: [],\r\n        gameMode: gameMode,\r\n        selectedArtist: gameMode === 'artist' ? selectedOption : null,\r\n        selectedGenre: gameMode === 'genre' ? selectedOption : null,\r\n        difficulty: difficulty\r\n      }));\r\n\r\n      setCurrentTrack(gameTracks[0]);\r\n      setGameState('ready');\r\n\r\n    } catch (error) {\r\n      console.error('❌ Game initialization failed:', error);\r\n      setErrorMessage(error.message);\r\n      setGameState('error');\r\n    }\r\n  };\r\n\r\n  const startGameSession = () => {\r\n    setGameState('playing');\r\n    setShowAnswer(false);\r\n    setUserGuess('');\r\n    \r\n    // Start game session in GameContext\r\n    const gameMode = gameData.gameMode || 'random';\r\n    startGame(gameMode);\r\n  };\r\n\r\n  const submitGuess = () => {\r\n    if (!userGuess.trim()) return;\r\n\r\n    const result = validateGuess(userGuess, currentTrack);\r\n    const { correct, correctAnswer } = result;\r\n    \r\n    setIsCorrect(correct);\r\n    setShowAnswer(true);\r\n\r\n    // Calculate time taken (for now use a random value, in real game you'd track actual time)\r\n    const timeTaken = Math.floor(Math.random() * 20) + 5; // 5-25 seconds\r\n    const pointsEarned = calculatePoints(correct, timeTaken);\r\n\r\n    // Add round to GameContext\r\n    addRound({\r\n      track: {\r\n        id: currentTrack.id || currentTrack.title,\r\n        title: currentTrack.title,\r\n        artists: currentTrack.artists,\r\n        album: currentTrack.album\r\n      },\r\n      userGuess,\r\n      correctAnswer,\r\n      isCorrect: correct,\r\n      timeTaken,\r\n      pointsEarned\r\n    });\r\n\r\n    // Update local game state\r\n    const newAnswer = {\r\n      track: currentTrack,\r\n      guess: userGuess,\r\n      correct: correct,\r\n      correctAnswer: correctAnswer\r\n    };\r\n\r\n    setGameData(prev => ({\r\n      ...prev,\r\n      score: correct ? prev.score + pointsEarned : prev.score,\r\n      answers: [...prev.answers, newAnswer]\r\n    }));\r\n  };\r\n\r\n  const nextQuestion = async () => {\r\n    const nextIndex = gameData.currentIndex + 1;\r\n    \r\n    if (nextIndex >= gameData.tracks.length) {\r\n      // Game is finished, end the game session and save score\r\n      if (isAuthenticated()) {\r\n        try {\r\n          const result = await endGame();\r\n          console.log('Game ended and score saved:', result);\r\n        } catch (error) {\r\n          console.error('Failed to save game score:', error);\r\n        }\r\n      }\r\n      setGameState('finished');\r\n      return;\r\n    }\r\n\r\n    // Mark current track as used\r\n    const currentTrackId = currentTrack?.id;\r\n    const updatedUsedTrackIds = currentTrackId ? [...gameData.usedTrackIds, currentTrackId] : gameData.usedTrackIds;\r\n    \r\n    setGameData(prev => ({\r\n      ...prev,\r\n      currentIndex: nextIndex,\r\n      usedTrackIds: updatedUsedTrackIds\r\n    }));\r\n    \r\n    const nextTrack = gameData.tracks[nextIndex];\r\n    setCurrentTrack(nextTrack);\r\n    setUserGuess('');\r\n    setShowAnswer(false);\r\n    setCheatMode(false); // Auto-disable cheat mode on next question\r\n    \r\n    console.log(`🎵 Playing track ${nextIndex + 1}/${gameData.totalQuestions}: \"${nextTrack?.title}\" by ${nextTrack?.artists?.[0]?.name}`);\r\n  };\r\n\r\n  const restartGame = () => {\r\n    setGameState('selectMode');\r\n  };\r\n\r\n\r\n  const selectGameMode = (mode, option = null) => {\r\n    initializeGame(mode, option);\r\n  };\r\n\r\n  // Handlers for the components\r\n  const handleModeSelection = (mode, option = null) => {\r\n    selectGameMode(mode, option);\r\n  };\r\n\r\n  const handleToggleCheatMode = () => {\r\n    setCheatMode(prev => !prev);\r\n  };\r\n\r\n  const handleRetry = () => {\r\n    setGameState('selectMode');\r\n  };\r\n  \r\n  const handleDifficultyChange = (newDifficulty) => {\r\n    setDifficulty(newDifficulty);\r\n    setGameData(prev => ({\r\n      ...prev,\r\n      difficulty: newDifficulty\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full min-h-screen py-8\">\r\n      {gameState === 'selectMode' && (\r\n        <GameModeSelector onSelectMode={handleModeSelection} />\r\n      )}\r\n      {gameState === 'loading' && <LoadingScreen />}\r\n      {gameState === 'error' && (\r\n        <ErrorScreen \r\n          errorMessage={errorMessage} \r\n          onRetry={handleRetry} \r\n        />\r\n      )}\r\n      {gameState === 'ready' && (\r\n        <ReadyScreen \r\n          gameData={gameData} \r\n          difficulty={difficulty}\r\n          onDifficultyChange={handleDifficultyChange}\r\n          onStart={startGameSession} \r\n        />\r\n      )}\r\n      {gameState === 'playing' && (\r\n        <GameScreen\r\n          gameData={gameData}\r\n          currentTrack={currentTrack}\r\n          difficulty={difficulty}\r\n          userGuess={userGuess}\r\n          setUserGuess={setUserGuess}\r\n          showAnswer={showAnswer}\r\n          isCorrect={isCorrect}\r\n          cheatMode={cheatMode}\r\n          onToggleCheatMode={handleToggleCheatMode}\r\n          onSubmitGuess={submitGuess}\r\n          onNextQuestion={nextQuestion}\r\n        />\r\n      )}\r\n      {gameState === 'finished' && (\r\n        <FinishedScreen \r\n          gameData={gameData} \r\n          onRestart={restartGame} \r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}