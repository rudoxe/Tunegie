{"ast":null,"code":"import _objectSpread from\"C:/laragon/www/Tunegie/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect}from'react';import itunesApiService from'../services/itunesApi';import{useGame}from'../contexts/GameContext';import{useAuth}from'../contexts/AuthContext';import{validateGuess}from'../utils/gameUtils';// Import organized components\nimport GameModeSelector from'../components/Game/GameModeSelector';import GameScreen from'../components/Game/GameScreen';import{LoadingScreen,ErrorScreen,ReadyScreen,FinishedScreen}from'../components/Game/GameScreens';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export default function Game(){const{startGame,addRound,endGame,calculatePoints}=useGame();const{isAuthenticated}=useAuth();const[gameState,setGameState]=useState('loading');// selectMode, loading, ready, playing, finished, error\nconst[currentTrack,setCurrentTrack]=useState(null);const[difficulty,setDifficulty]=useState('medium');// easy (10s), medium (5s), hard (2s)\nconst[gameData,setGameData]=useState({tracks:[],backupTracks:[],usedTrackIds:[],currentIndex:0,score:0,totalQuestions:10,answers:[],gameMode:null,// 'random', 'artist', 'genre'\nselectedArtist:null,selectedGenre:null,difficulty:'medium'});const[userGuess,setUserGuess]=useState('');const[showAnswer,setShowAnswer]=useState(false);const[isCorrect,setIsCorrect]=useState(false);const[errorMessage,setErrorMessage]=useState('');const[cheatMode,setCheatMode]=useState(false);// Initialize game - start with mode selection\nuseEffect(()=>{setGameState('selectMode');},[]);const initializeGame=async function(gameMode){let selectedOption=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;setGameState('loading');setErrorMessage('');try{console.log(\"\\uD83C\\uDFAE Initializing Tunegie Game (\".concat(gameMode,\" mode)...\"));console.log('🎵 Using iTunes API for real music tracks');// Test iTunes API connection\nconst connected=await itunesApiService.testConnection();if(!connected){throw new Error('Unable to connect to iTunes API. Please check your internet connection.');}// Load tracks based on game mode\nlet tracks=[];console.log(\"\\uD83C\\uDFB5 Loading \".concat(gameMode,\" tracks...\"));// Load more tracks than needed to avoid duplicates and have variety\nconst tracksToLoad=Math.max(gameData.totalQuestions*3,50);// Load 3x more tracks for variety\nif(gameMode==='artist'&&selectedOption){tracks=await itunesApiService.getTracksByArtist(selectedOption,tracksToLoad);console.log(\"\\uD83C\\uDFA4 Loaded \".concat(tracks.length,\" tracks for artist: \").concat(selectedOption));}else if(gameMode==='genre'&&selectedOption){tracks=await itunesApiService.getTracksByGenre(selectedOption,tracksToLoad);console.log(\"\\uD83C\\uDFBC Loaded \".concat(tracks.length,\" tracks for genre: \").concat(selectedOption));}else{tracks=await itunesApiService.getRandomTracksForGame(tracksToLoad);console.log(\"\\uD83C\\uDFB2 Loaded \".concat(tracks.length,\" random tracks\"));}if(tracks.length===0){throw new Error(\"No tracks available for \".concat(gameMode,\" mode. Please try a different option.\"));}// Shuffle all tracks to ensure randomness\nconst shuffledTracks=tracks.sort(()=>0.5-Math.random());// Select only the number we need for the game (but keep extras as backups)\nconst gameTracks=shuffledTracks.slice(0,gameData.totalQuestions);const backupTracks=shuffledTracks.slice(gameData.totalQuestions);console.log(\"\\u2705 Selected \".concat(gameTracks.length,\" tracks for the game (\").concat(backupTracks.length,\" backup tracks available)\"));setGameData(prev=>_objectSpread(_objectSpread({},prev),{},{tracks:gameTracks,backupTracks:backupTracks,// Store backup tracks for replacement if needed\nusedTrackIds:[],// Track which songs have been used\ncurrentIndex:0,score:0,answers:[],gameMode:gameMode,selectedArtist:gameMode==='artist'?selectedOption:null,selectedGenre:gameMode==='genre'?selectedOption:null,difficulty:difficulty}));setCurrentTrack(gameTracks[0]);setGameState('ready');}catch(error){console.error('❌ Game initialization failed:',error);setErrorMessage(error.message);setGameState('error');}};const startGameSession=()=>{setGameState('playing');setShowAnswer(false);setUserGuess('');// Start game session in GameContext\nconst gameMode=gameData.gameMode||'random';startGame(gameMode);};const submitGuess=()=>{if(!userGuess.trim())return;const result=validateGuess(userGuess,currentTrack);const{correct,correctAnswer}=result;setIsCorrect(correct);setShowAnswer(true);// Calculate time taken (for now use a random value, in real game you'd track actual time)\nconst timeTaken=Math.floor(Math.random()*20)+5;// 5-25 seconds\nconst pointsEarned=calculatePoints(correct,timeTaken);// Add round to GameContext\naddRound({track:{id:currentTrack.id||currentTrack.title,title:currentTrack.title,artists:currentTrack.artists,album:currentTrack.album},userGuess,correctAnswer,isCorrect:correct,timeTaken,pointsEarned});// Update local game state\nconst newAnswer={track:currentTrack,guess:userGuess,correct:correct,correctAnswer:correctAnswer};setGameData(prev=>_objectSpread(_objectSpread({},prev),{},{score:correct?prev.score+pointsEarned:prev.score,answers:[...prev.answers,newAnswer]}));};const nextQuestion=async()=>{var _nextTrack$artists,_nextTrack$artists$;const nextIndex=gameData.currentIndex+1;if(nextIndex>=gameData.tracks.length){// Game is finished, end the game session and save score\nif(isAuthenticated()){try{const result=await endGame();console.log('Game ended and score saved:',result);}catch(error){console.error('Failed to save game score:',error);}}setGameState('finished');return;}// Mark current track as used\nconst currentTrackId=currentTrack===null||currentTrack===void 0?void 0:currentTrack.id;const updatedUsedTrackIds=currentTrackId?[...gameData.usedTrackIds,currentTrackId]:gameData.usedTrackIds;setGameData(prev=>_objectSpread(_objectSpread({},prev),{},{currentIndex:nextIndex,usedTrackIds:updatedUsedTrackIds}));const nextTrack=gameData.tracks[nextIndex];setCurrentTrack(nextTrack);setUserGuess('');setShowAnswer(false);setCheatMode(false);// Auto-disable cheat mode on next question\nconsole.log(\"\\uD83C\\uDFB5 Playing track \".concat(nextIndex+1,\"/\").concat(gameData.totalQuestions,\": \\\"\").concat(nextTrack===null||nextTrack===void 0?void 0:nextTrack.title,\"\\\" by \").concat(nextTrack===null||nextTrack===void 0?void 0:(_nextTrack$artists=nextTrack.artists)===null||_nextTrack$artists===void 0?void 0:(_nextTrack$artists$=_nextTrack$artists[0])===null||_nextTrack$artists$===void 0?void 0:_nextTrack$artists$.name));};const restartGame=()=>{setGameState('selectMode');};const selectGameMode=function(mode){let option=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;initializeGame(mode,option);};// Handlers for the components\nconst handleModeSelection=function(mode){let option=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;selectGameMode(mode,option);};const handleToggleCheatMode=()=>{setCheatMode(prev=>!prev);};const handleRetry=()=>{setGameState('selectMode');};const handleDifficultyChange=newDifficulty=>{setDifficulty(newDifficulty);setGameData(prev=>_objectSpread(_objectSpread({},prev),{},{difficulty:newDifficulty}));};return/*#__PURE__*/_jsxs(\"div\",{className:\"w-full min-h-screen py-8\",children:[gameState==='selectMode'&&/*#__PURE__*/_jsx(GameModeSelector,{onSelectMode:handleModeSelection}),gameState==='loading'&&/*#__PURE__*/_jsx(LoadingScreen,{}),gameState==='error'&&/*#__PURE__*/_jsx(ErrorScreen,{errorMessage:errorMessage,onRetry:handleRetry}),gameState==='ready'&&/*#__PURE__*/_jsx(ReadyScreen,{gameData:gameData,difficulty:difficulty,onDifficultyChange:handleDifficultyChange,onStart:startGameSession}),gameState==='playing'&&/*#__PURE__*/_jsx(GameScreen,{gameData:gameData,currentTrack:currentTrack,difficulty:difficulty,userGuess:userGuess,setUserGuess:setUserGuess,showAnswer:showAnswer,isCorrect:isCorrect,cheatMode:cheatMode,onToggleCheatMode:handleToggleCheatMode,onSubmitGuess:submitGuess,onNextQuestion:nextQuestion}),gameState==='finished'&&/*#__PURE__*/_jsx(FinishedScreen,{gameData:gameData,onRestart:restartGame})]});}","map":{"version":3,"names":["React","useState","useEffect","itunesApiService","useGame","useAuth","validateGuess","GameModeSelector","GameScreen","LoadingScreen","ErrorScreen","ReadyScreen","FinishedScreen","jsx","_jsx","jsxs","_jsxs","Game","startGame","addRound","endGame","calculatePoints","isAuthenticated","gameState","setGameState","currentTrack","setCurrentTrack","difficulty","setDifficulty","gameData","setGameData","tracks","backupTracks","usedTrackIds","currentIndex","score","totalQuestions","answers","gameMode","selectedArtist","selectedGenre","userGuess","setUserGuess","showAnswer","setShowAnswer","isCorrect","setIsCorrect","errorMessage","setErrorMessage","cheatMode","setCheatMode","initializeGame","selectedOption","arguments","length","undefined","console","log","concat","connected","testConnection","Error","tracksToLoad","Math","max","getTracksByArtist","getTracksByGenre","getRandomTracksForGame","shuffledTracks","sort","random","gameTracks","slice","prev","_objectSpread","error","message","startGameSession","submitGuess","trim","result","correct","correctAnswer","timeTaken","floor","pointsEarned","track","id","title","artists","album","newAnswer","guess","nextQuestion","_nextTrack$artists","_nextTrack$artists$","nextIndex","currentTrackId","updatedUsedTrackIds","nextTrack","name","restartGame","selectGameMode","mode","option","handleModeSelection","handleToggleCheatMode","handleRetry","handleDifficultyChange","newDifficulty","className","children","onSelectMode","onRetry","onDifficultyChange","onStart","onToggleCheatMode","onSubmitGuess","onNextQuestion","onRestart"],"sources":["C:/laragon/www/Tunegie/frontend/src/pages/Game.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport itunesApiService from '../services/itunesApi';\r\nimport { useGame } from '../contexts/GameContext';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { validateGuess } from '../utils/gameUtils';\r\n\r\n// Import organized components\r\nimport GameModeSelector from '../components/Game/GameModeSelector';\r\nimport GameScreen from '../components/Game/GameScreen';\r\nimport { LoadingScreen, ErrorScreen, ReadyScreen, FinishedScreen } from '../components/Game/GameScreens';\r\n\r\nexport default function Game() {\r\n  const { startGame, addRound, endGame, calculatePoints } = useGame();\r\n  const { isAuthenticated } = useAuth();\r\n  const [gameState, setGameState] = useState('loading'); // selectMode, loading, ready, playing, finished, error\r\n  const [currentTrack, setCurrentTrack] = useState(null);\r\n  const [difficulty, setDifficulty] = useState('medium'); // easy (10s), medium (5s), hard (2s)\r\n  const [gameData, setGameData] = useState({\r\n    tracks: [],\r\n    backupTracks: [],\r\n    usedTrackIds: [],\r\n    currentIndex: 0,\r\n    score: 0,\r\n    totalQuestions: 10,\r\n    answers: [],\r\n    gameMode: null, // 'random', 'artist', 'genre'\r\n    selectedArtist: null,\r\n    selectedGenre: null,\r\n    difficulty: 'medium'\r\n  });\r\n  const [userGuess, setUserGuess] = useState('');\r\n  const [showAnswer, setShowAnswer] = useState(false);\r\n  const [isCorrect, setIsCorrect] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const [cheatMode, setCheatMode] = useState(false);\r\n\r\n  // Initialize game - start with mode selection\r\n  useEffect(() => {\r\n    setGameState('selectMode');\r\n  }, []);\r\n\r\n  const initializeGame = async (gameMode, selectedOption = null) => {\r\n    setGameState('loading');\r\n    setErrorMessage('');\r\n\r\n    try {\r\n      console.log(`🎮 Initializing Tunegie Game (${gameMode} mode)...`);\r\n      console.log('🎵 Using iTunes API for real music tracks');\r\n      \r\n      // Test iTunes API connection\r\n      const connected = await itunesApiService.testConnection();\r\n\r\n      if (!connected) {\r\n        throw new Error('Unable to connect to iTunes API. Please check your internet connection.');\r\n      }\r\n\r\n      // Load tracks based on game mode\r\n      let tracks = [];\r\n      console.log(`🎵 Loading ${gameMode} tracks...`);\r\n      \r\n      // Load more tracks than needed to avoid duplicates and have variety\r\n      const tracksToLoad = Math.max(gameData.totalQuestions * 3, 50); // Load 3x more tracks for variety\r\n      \r\n      if (gameMode === 'artist' && selectedOption) {\r\n        tracks = await itunesApiService.getTracksByArtist(selectedOption, tracksToLoad);\r\n        console.log(`🎤 Loaded ${tracks.length} tracks for artist: ${selectedOption}`);\r\n      } else if (gameMode === 'genre' && selectedOption) {\r\n        tracks = await itunesApiService.getTracksByGenre(selectedOption, tracksToLoad);\r\n        console.log(`🎼 Loaded ${tracks.length} tracks for genre: ${selectedOption}`);\r\n      } else {\r\n        tracks = await itunesApiService.getRandomTracksForGame(tracksToLoad);\r\n        console.log(`🎲 Loaded ${tracks.length} random tracks`);\r\n      }\r\n      \r\n      if (tracks.length === 0) {\r\n        throw new Error(`No tracks available for ${gameMode} mode. Please try a different option.`);\r\n      }\r\n\r\n      // Shuffle all tracks to ensure randomness\r\n      const shuffledTracks = tracks.sort(() => 0.5 - Math.random());\r\n      \r\n      // Select only the number we need for the game (but keep extras as backups)\r\n      const gameTracks = shuffledTracks.slice(0, gameData.totalQuestions);\r\n      const backupTracks = shuffledTracks.slice(gameData.totalQuestions);\r\n      \r\n      console.log(`✅ Selected ${gameTracks.length} tracks for the game (${backupTracks.length} backup tracks available)`);\r\n      \r\n      setGameData(prev => ({\r\n        ...prev,\r\n        tracks: gameTracks,\r\n        backupTracks: backupTracks, // Store backup tracks for replacement if needed\r\n        usedTrackIds: [], // Track which songs have been used\r\n        currentIndex: 0,\r\n        score: 0,\r\n        answers: [],\r\n        gameMode: gameMode,\r\n        selectedArtist: gameMode === 'artist' ? selectedOption : null,\r\n        selectedGenre: gameMode === 'genre' ? selectedOption : null,\r\n        difficulty: difficulty\r\n      }));\r\n\r\n      setCurrentTrack(gameTracks[0]);\r\n      setGameState('ready');\r\n\r\n    } catch (error) {\r\n      console.error('❌ Game initialization failed:', error);\r\n      setErrorMessage(error.message);\r\n      setGameState('error');\r\n    }\r\n  };\r\n\r\n  const startGameSession = () => {\r\n    setGameState('playing');\r\n    setShowAnswer(false);\r\n    setUserGuess('');\r\n    \r\n    // Start game session in GameContext\r\n    const gameMode = gameData.gameMode || 'random';\r\n    startGame(gameMode);\r\n  };\r\n\r\n  const submitGuess = () => {\r\n    if (!userGuess.trim()) return;\r\n\r\n    const result = validateGuess(userGuess, currentTrack);\r\n    const { correct, correctAnswer } = result;\r\n    \r\n    setIsCorrect(correct);\r\n    setShowAnswer(true);\r\n\r\n    // Calculate time taken (for now use a random value, in real game you'd track actual time)\r\n    const timeTaken = Math.floor(Math.random() * 20) + 5; // 5-25 seconds\r\n    const pointsEarned = calculatePoints(correct, timeTaken);\r\n\r\n    // Add round to GameContext\r\n    addRound({\r\n      track: {\r\n        id: currentTrack.id || currentTrack.title,\r\n        title: currentTrack.title,\r\n        artists: currentTrack.artists,\r\n        album: currentTrack.album\r\n      },\r\n      userGuess,\r\n      correctAnswer,\r\n      isCorrect: correct,\r\n      timeTaken,\r\n      pointsEarned\r\n    });\r\n\r\n    // Update local game state\r\n    const newAnswer = {\r\n      track: currentTrack,\r\n      guess: userGuess,\r\n      correct: correct,\r\n      correctAnswer: correctAnswer\r\n    };\r\n\r\n    setGameData(prev => ({\r\n      ...prev,\r\n      score: correct ? prev.score + pointsEarned : prev.score,\r\n      answers: [...prev.answers, newAnswer]\r\n    }));\r\n  };\r\n\r\n  const nextQuestion = async () => {\r\n    const nextIndex = gameData.currentIndex + 1;\r\n    \r\n    if (nextIndex >= gameData.tracks.length) {\r\n      // Game is finished, end the game session and save score\r\n      if (isAuthenticated()) {\r\n        try {\r\n          const result = await endGame();\r\n          console.log('Game ended and score saved:', result);\r\n        } catch (error) {\r\n          console.error('Failed to save game score:', error);\r\n        }\r\n      }\r\n      setGameState('finished');\r\n      return;\r\n    }\r\n\r\n    // Mark current track as used\r\n    const currentTrackId = currentTrack?.id;\r\n    const updatedUsedTrackIds = currentTrackId ? [...gameData.usedTrackIds, currentTrackId] : gameData.usedTrackIds;\r\n    \r\n    setGameData(prev => ({\r\n      ...prev,\r\n      currentIndex: nextIndex,\r\n      usedTrackIds: updatedUsedTrackIds\r\n    }));\r\n    \r\n    const nextTrack = gameData.tracks[nextIndex];\r\n    setCurrentTrack(nextTrack);\r\n    setUserGuess('');\r\n    setShowAnswer(false);\r\n    setCheatMode(false); // Auto-disable cheat mode on next question\r\n    \r\n    console.log(`🎵 Playing track ${nextIndex + 1}/${gameData.totalQuestions}: \"${nextTrack?.title}\" by ${nextTrack?.artists?.[0]?.name}`);\r\n  };\r\n\r\n  const restartGame = () => {\r\n    setGameState('selectMode');\r\n  };\r\n\r\n\r\n  const selectGameMode = (mode, option = null) => {\r\n    initializeGame(mode, option);\r\n  };\r\n\r\n  // Handlers for the components\r\n  const handleModeSelection = (mode, option = null) => {\r\n    selectGameMode(mode, option);\r\n  };\r\n\r\n  const handleToggleCheatMode = () => {\r\n    setCheatMode(prev => !prev);\r\n  };\r\n\r\n  const handleRetry = () => {\r\n    setGameState('selectMode');\r\n  };\r\n  \r\n  const handleDifficultyChange = (newDifficulty) => {\r\n    setDifficulty(newDifficulty);\r\n    setGameData(prev => ({\r\n      ...prev,\r\n      difficulty: newDifficulty\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full min-h-screen py-8\">\r\n      {gameState === 'selectMode' && (\r\n        <GameModeSelector onSelectMode={handleModeSelection} />\r\n      )}\r\n      {gameState === 'loading' && <LoadingScreen />}\r\n      {gameState === 'error' && (\r\n        <ErrorScreen \r\n          errorMessage={errorMessage} \r\n          onRetry={handleRetry} \r\n        />\r\n      )}\r\n      {gameState === 'ready' && (\r\n        <ReadyScreen \r\n          gameData={gameData} \r\n          difficulty={difficulty}\r\n          onDifficultyChange={handleDifficultyChange}\r\n          onStart={startGameSession} \r\n        />\r\n      )}\r\n      {gameState === 'playing' && (\r\n        <GameScreen\r\n          gameData={gameData}\r\n          currentTrack={currentTrack}\r\n          difficulty={difficulty}\r\n          userGuess={userGuess}\r\n          setUserGuess={setUserGuess}\r\n          showAnswer={showAnswer}\r\n          isCorrect={isCorrect}\r\n          cheatMode={cheatMode}\r\n          onToggleCheatMode={handleToggleCheatMode}\r\n          onSubmitGuess={submitGuess}\r\n          onNextQuestion={nextQuestion}\r\n        />\r\n      )}\r\n      {gameState === 'finished' && (\r\n        <FinishedScreen \r\n          gameData={gameData} \r\n          onRestart={restartGame} \r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}